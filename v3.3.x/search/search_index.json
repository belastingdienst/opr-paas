{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/code-of-conduct/","title":"Code of Conduct","text":"<p>The Paas Operator project follows the CNCF Code of Conduct.</p>"},{"location":"about/contributing/","title":"Contributing to PaaS","text":"<p>Welcome! We are glad that you want to contribute to our PaaS Operator project! \ud83d\udc96</p> <p>As you get started, you are in the best position to give us feedbacks on areas of our project that we need help with, including:</p> <ul> <li>Problems found while setting up the development environment;</li> <li>Gaps in our documentation;</li> <li>Bugs in our GitHub actions;</li> <li>Promotion of PostgreSQL on Kubernetes with our operator;</li> </ul> <p>First, though, it is important that you read the Code of Conduct.</p> <p>The guidelines below are a starting point. We don't want to limit your creativity, passion, and initiative. If you think there's a better way, please feel free to bring it up in a GitHub discussion, or open a pull request. We're certain there are always better ways to do things, we just need to start some constructive dialogue!</p>"},{"location":"about/contributing/#ways-to-contribute","title":"Ways to contribute","text":"<p>We welcome many types of contributions including:</p> <ul> <li>New features;</li> <li>Builds, CI/CD changes;</li> <li>Bug fixes;</li> <li>Documentation;</li> <li>Issue Triage;</li> <li>Answering questions on Github Discussions;</li> <li>Communications / Social Media / Blog Posts;</li> <li>Events participation;</li> <li>Release management;</li> </ul> <p>For more details on development contributions, please refer to the \"Developer Guide\" section on the documentation site.</p>"},{"location":"about/contributing/#raising-issues","title":"Raising Issues","text":"<p>When you want to raise an issue, use GitHub Issues.</p> <p>If you are trying to report a vulnerability, please make sure to read the security policy.</p>"},{"location":"about/license/","title":"License","text":"<p>The Paas Operator is being made available under the European Union Public License (EUPL) v1.2, which is available in multiple languages.</p> <p>For your convenience, you can find the full, english language version below.</p> <pre><code>                  EUROPEAN UNION PUBLIC LICENCE v. 1.2\n                  EUPL \u00a9 the European Union 2007, 2016\n</code></pre> <p>This European Union Public Licence (the \u2018EUPL\u2019) applies to the Work (as defined below) which is provided under the terms of this Licence. Any use of the Work, other than as authorised under this Licence is prohibited (to the extent such use is covered by a right of the copyright holder of the Work).</p> <p>The Work is provided under the terms of this Licence when the Licensor (as defined below) has placed the following notice immediately following the copyright notice for the Work:</p> <pre><code>    Licensed under the EUPL\n</code></pre> <p>or has expressed by any other means his willingness to license under the EUPL.</p> <ol> <li>Definitions</li> </ol> <p>In this Licence, the following terms have the following meaning:</p> <ul> <li> <p>\u2018The Licence\u2019: this Licence.</p> </li> <li> <p>\u2018The Original Work\u2019: the work or software distributed or communicated by the   Licensor under this Licence, available as Source Code and also as Executable   Code as the case may be.</p> </li> <li> <p>\u2018Derivative Works\u2019: the works or software that could be created by the   Licensee, based upon the Original Work or modifications thereof. This   Licence does not define the extent of modification or dependence on the   Original Work required in order to classify a work as a Derivative Work;   this extent is determined by copyright law applicable in the country   mentioned in Article 15.</p> </li> <li> <p>\u2018The Work\u2019: the Original Work or its Derivative Works.</p> </li> <li> <p>\u2018The Source Code\u2019: the human-readable form of the Work which is the most   convenient for people to study and modify.</p> </li> <li> <p>\u2018The Executable Code\u2019: any code which has generally been compiled and which   is meant to be interpreted by a computer as a program.</p> </li> <li> <p>\u2018The Licensor\u2019: the natural or legal person that distributes or communicates   the Work under the Licence.</p> </li> <li> <p>\u2018Contributor(s)\u2019: any natural or legal person who modifies the Work under   the Licence, or otherwise contributes to the creation of a Derivative Work.</p> </li> <li> <p>\u2018The Licensee\u2019 or \u2018You\u2019: any natural or legal person who makes any usage of   the Work under the terms of the Licence.</p> </li> <li> <p>\u2018Distribution\u2019 or \u2018Communication\u2019: any act of selling, giving, lending,   renting, distributing, communicating, transmitting, or otherwise making   available, online or offline, copies of the Work or providing access to its   essential functionalities at the disposal of any other natural or legal   person.</p> </li> <li> <p>Scope of the rights granted by the Licence</p> </li> </ul> <p>The Licensor hereby grants You a worldwide, royalty-free, non-exclusive, sublicensable licence to do the following, for the duration of copyright vested in the Original Work:</p> <ul> <li>use the Work in any circumstance and for all usage,</li> <li>reproduce the Work,</li> <li>modify the Work, and make Derivative Works based upon the Work,</li> <li>communicate to the public, including the right to make available or display   the Work or copies thereof to the public and perform publicly, as the case   may be, the Work,</li> <li>distribute the Work or copies thereof,</li> <li>lend and rent the Work or copies thereof,</li> <li>sublicense rights in the Work or copies thereof.</li> </ul> <p>Those rights can be exercised on any media, supports and formats, whether now known or later invented, as far as the applicable law permits so.</p> <p>In the countries where moral rights apply, the Licensor waives his right to exercise his moral right to the extent allowed by law in order to make effective the licence of the economic rights here above listed.</p> <p>The Licensor grants to the Licensee royalty-free, non-exclusive usage rights to any patents held by the Licensor, to the extent necessary to make use of the rights granted on the Work under this Licence.</p> <ol> <li>Communication of the Source Code</li> </ol> <p>The Licensor may provide the Work either in its Source Code form, or as Executable Code. If the Work is provided as Executable Code, the Licensor provides in addition a machine-readable copy of the Source Code of the Work along with each copy of the Work that the Licensor distributes or indicates, in a notice following the copyright notice attached to the Work, a repository where the Source Code is easily and freely accessible for as long as the Licensor continues to distribute or communicate the Work.</p> <ol> <li>Limitations on copyright</li> </ol> <p>Nothing in this Licence is intended to deprive the Licensee of the benefits from any exception or limitation to the exclusive rights of the rights owners in the Work, of the exhaustion of those rights or of other applicable limitations thereto.</p> <ol> <li>Obligations of the Licensee</li> </ol> <p>The grant of the rights mentioned above is subject to some restrictions and obligations imposed on the Licensee. Those obligations are the following:</p> <p>Attribution right: The Licensee shall keep intact all copyright, patent or trademarks notices and all notices that refer to the Licence and to the disclaimer of warranties. The Licensee must include a copy of such notices and a copy of the Licence with every copy of the Work he/she distributes or communicates. The Licensee must cause any Derivative Work to carry prominent notices stating that the Work has been modified and the date of modification.</p> <p>Copyleft clause: If the Licensee distributes or communicates copies of the Original Works or Derivative Works, this Distribution or Communication will be done under the terms of this Licence or of a later version of this Licence unless the Original Work is expressly distributed only under this version of the Licence \u2014 for example by communicating \u2018EUPL v. 1.2 only\u2019. The Licensee (becoming Licensor) cannot offer or impose any additional terms or conditions on the Work or Derivative Work that alter or restrict the terms of the Licence.</p> <p>Compatibility clause: If the Licensee Distributes or Communicates Derivative Works or copies thereof based upon both the Work and another work licensed under a Compatible Licence, this Distribution or Communication can be done under the terms of this Compatible Licence. For the sake of this clause, \u2018Compatible Licence\u2019 refers to the licences listed in the appendix attached to this Licence. Should the Licensee's obligations under the Compatible Licence conflict with his/her obligations under this Licence, the obligations of the Compatible Licence shall prevail.</p> <p>Provision of Source Code: When distributing or communicating copies of the Work, the Licensee will provide a machine-readable copy of the Source Code or indicate a repository where this Source will be easily and freely available for as long as the Licensee continues to distribute or communicate the Work.</p> <p>Legal Protection: This Licence does not grant permission to use the trade names, trademarks, service marks, or names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the copyright notice.</p> <ol> <li>Chain of Authorship</li> </ol> <p>The original Licensor warrants that the copyright in the Original Work granted hereunder is owned by him/her or licensed to him/her and that he/she has the power and authority to grant the Licence.</p> <p>Each Contributor warrants that the copyright in the modifications he/she brings to the Work are owned by him/her or licensed to him/her and that he/she has the power and authority to grant the Licence.</p> <p>Each time You accept the Licence, the original Licensor and subsequent Contributors grant You a licence to their contributions to the Work, under the terms of this Licence.</p> <ol> <li>Disclaimer of Warranty</li> </ol> <p>The Work is a work in progress, which is continuously improved by numerous Contributors. It is not a finished work and may therefore contain defects or \u2018bugs\u2019 inherent to this type of development.</p> <p>For the above reason, the Work is provided under the Licence on an \u2018as is\u2019 basis and without warranties of any kind concerning the Work, including without limitation merchantability, fitness for a particular purpose, absence of defects or errors, accuracy, non-infringement of intellectual property rights other than copyright as stated in Article 6 of this Licence.</p> <p>This disclaimer of warranty is an essential part of the Licence and a condition for the grant of any rights to the Work.</p> <ol> <li>Disclaimer of Liability</li> </ol> <p>Except in the cases of wilful misconduct or damages directly caused to natural persons, the Licensor will in no event be liable for any direct or indirect, material or moral, damages of any kind, arising out of the Licence or of the use of the Work, including without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, loss of data or any commercial damage, even if the Licensor has been advised of the possibility of such damage. However, the Licensor will be liable under statutory product liability laws as far such laws apply to the Work.</p> <ol> <li>Additional agreements</li> </ol> <p>While distributing the Work, You may choose to conclude an additional agreement, defining obligations or services consistent with this Licence. However, if accepting obligations, You may act only on your own behalf and on your sole responsibility, not on behalf of the original Licensor or any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against such Contributor by the fact You have accepted any warranty or additional liability.</p> <ol> <li>Acceptance of the Licence</li> </ol> <p>The provisions of this Licence can be accepted by clicking on an icon \u2018I agree\u2019 placed under the bottom of a window displaying the text of this Licence or by affirming consent in any other similar way, in accordance with the rules of applicable law. Clicking on that icon indicates your clear and irrevocable acceptance of this Licence and all of its terms and conditions.</p> <p>Similarly, you irrevocably accept this Licence and all of its terms and conditions by exercising any rights granted to You by Article 2 of this Licence, such as the use of the Work, the creation by You of a Derivative Work or the Distribution or Communication by You of the Work or copies thereof.</p> <ol> <li>Information to the public</li> </ol> <p>In case of any Distribution or Communication of the Work by means of electronic communication by You (for example, by offering to download the Work from a remote location) the distribution channel or media (for example, a website) must at least provide to the public the information requested by the applicable law regarding the Licensor, the Licence and the way it may be accessible, concluded, stored and reproduced by the Licensee.</p> <ol> <li>Termination of the Licence</li> </ol> <p>The Licence and the rights granted hereunder will terminate automatically upon any breach by the Licensee of the terms of the Licence.</p> <p>Such a termination will not terminate the licences of any person who has received the Work from the Licensee under the Licence, provided such persons remain in full compliance with the Licence.</p> <ol> <li>Miscellaneous</li> </ol> <p>Without prejudice of Article 9 above, the Licence represents the complete agreement between the Parties as to the Work.</p> <p>If any provision of the Licence is invalid or unenforceable under applicable law, this will not affect the validity or enforceability of the Licence as a whole. Such provision will be construed or reformed so as necessary to make it valid and enforceable.</p> <p>The European Commission may publish other linguistic versions or new versions of this Licence or updated versions of the Appendix, so far this is required and reasonable, without reducing the scope of the rights granted by the Licence. New versions of the Licence will be published with a unique version number.</p> <p>All linguistic versions of this Licence, approved by the European Commission, have identical value. Parties can take advantage of the linguistic version of their choice.</p> <ol> <li>Jurisdiction</li> </ol> <p>Without prejudice to specific agreement between parties,</p> <ul> <li> <p>any litigation resulting from the interpretation of this License, arising   between the European Union institutions, bodies, offices or agencies, as a   Licensor, and any Licensee, will be subject to the jurisdiction of the Court   of Justice of the European Union, as laid down in article 272 of the Treaty   on the Functioning of the European Union,</p> </li> <li> <p>any litigation arising between other parties and resulting from the   interpretation of this License, will be subject to the exclusive   jurisdiction of the competent court where the Licensor resides or conducts   its primary business.</p> </li> <li> <p>Applicable Law</p> </li> </ul> <p>Without prejudice to specific agreement between parties,</p> <ul> <li> <p>this Licence shall be governed by the law of the European Union Member State   where the Licensor has his seat, resides or has his registered office,</p> </li> <li> <p>this licence shall be governed by Belgian law if the Licensor has no seat,   residence or registered office inside a European Union Member State.</p> </li> </ul> <p>Appendix</p> <p>\u2018Compatible Licences\u2019 according to Article 5 EUPL are:</p> <ul> <li>GNU General Public License (GPL) v. 2, v. 3</li> <li>GNU Affero General Public License (AGPL) v. 3</li> <li>Open Software License (OSL) v. 2.1, v. 3.0</li> <li>Eclipse Public License (EPL) v. 1.0</li> <li>CeCILL v. 2.0, v. 2.1</li> <li>Mozilla Public Licence (MPL) v. 2</li> <li>GNU Lesser General Public Licence (LGPL) v. 2.1, v. 3</li> <li>Creative Commons Attribution-ShareAlike v. 3.0 Unported (CC BY-SA 3.0) for   works other than software</li> <li>European Union Public Licence (EUPL) v. 1.1, v. 1.2</li> <li>Qu\u00e9bec Free and Open-Source Licence \u2014 Reciprocity (LiLiQ-R) or Strong   Reciprocity (LiLiQ-R+).</li> </ul> <p>The European Commission may update this Appendix to later versions of the above licences without producing a new version of the EUPL, as long as they provide the rights granted in Article 2 of this Licence and protect the covered Source Code from exclusive appropriation.</p> <p>All other changes or additions to this Appendix require the production of a new EUPL version.</p>"},{"location":"about/branding/","title":"Branding","text":"<p>The Paas Operator, like many open source projects, has a logo. You can find the source of this logo (.svg format, made with Inkscape) in the <code>docs/about/branding</code> directory of the Git repository.</p> <p>You can also find a set of larger and smaller .png versions in that same directory, which are included on this page.</p> <p>\u00a9 2025 Tax Administration of The Netherlands.</p> <p>The branding, logo and its related assets are all: \u00a9 copyright 2025 Tax Administration of The Netherlands.</p>"},{"location":"about/branding/#logo","title":"Logo","text":""},{"location":"about/branding/#svg-formatted-source","title":"SVG formatted source","text":"<p>The file was created with Inkscape 1.4.</p> SVG source file"},{"location":"about/branding/#png-formatted-size-variants","title":"PNG formatted size variants","text":"16x16px 32x32px 120x80px 149x100px 180x180px 400x400px 500x335px"},{"location":"administrators-guide/","title":"Administrator\u2019s Guide","text":"<p>Welcome to the Administrator\u2019s Guide. This guide is intended for administrators and operators responsible for deploying, configuring, securing, and maintaining the Paas Operator in production environments.</p>"},{"location":"administrators-guide/#contents","title":"\ud83d\udcd8 Contents","text":"<ul> <li> <p>Installation   Step-by-step instructions to deploy the operator in your cluster.</p> </li> <li> <p>Configuration   Guidance on customizing system behavior via <code>PaasConfig</code>.</p> </li> <li> <p>Cluster\u2011Wide Quotas   Instructions for enforcing resource usage limits across namespaces.</p> </li> <li> <p>Capabilities   Modular, plugin\u2011style features like ArgoCD, Tekton, Grafana, and Keycloak.</p> </li> <li> <p>Secrets   Secure management of secrets within the operator.</p> </li> <li> <p>Security   Best practices and hardening guidelines for production deployments.</p> </li> <li> <p>Validations   Built\u2011in checks to ensure correct configurations and prevent misconfigurations.</p> </li> <li> <p>API Version migration   Docs regarding migrating v1alpha1 resources to v1alpha2</p> </li> </ul> <p>For development workflows, release procedures, and contributor guidelines, see the Developer\u2019s Guide.</p>"},{"location":"administrators-guide/#version-support","title":"Version Support","text":"<p>We follow a roll\u2011forward support model. Only the latest major version is supported. Previous major versions are considered end-of-life (EOL) and do not receive updates, security patches, or fixes.</p> <p>Administrators are expected to upgrade to the latest available version to remain supported.</p> <p>For detailed information about our support policy, including versioning, hotfixes, and the no\u2011backport rule, please refer to the Support Policy in the Developer\u2019s Guide.</p>"},{"location":"administrators-guide/capabilities/","title":"Configuring capabilities","text":"<p>The Paas Operator can deliver capabilities to enable Paas deployments with CI and CD options with a one-click option. Some examples of capabilities include:</p> <ul> <li>enabling ArgoCD for Continuous Delivery on your Paas namespaces</li> <li>enabling Tekton for Continuous Integration of your application components</li> <li>observing your Paas resources with Grafana</li> <li>configuring federated Authentication and Authorization with keycloak</li> </ul> <p>Configuring capabilities does not require code changes / building new images. It only requires:</p> <ol> <li>configuration for the Paas operator via <code>PaasConfig</code></li> <li>an ApplicationSet in the namespace of the cluster-wide ArgoCD</li> <li>a git repository for the cluster-wide ArgoCD to be used for deploying the capability for a Paas with the capability defined</li> </ol>"},{"location":"administrators-guide/capabilities/#configuring-capabilities-in-the-paasconfig","title":"Configuring capabilities in the PaasConfig","text":"<p>On every cluster running the Paas operator, a PaasConfig resource is defined. This PaasConfig resource holds the specific configuration for the operator. For each capability an entry needs to be set in <code>spec.capabilities</code> map. An example can be found below. Furthermore, the Paas operator needs to know the namespace where to search for ApplicationSets managing the capability (<code>spec.clusterwide_argocd_namespace</code>).</p>"},{"location":"administrators-guide/capabilities/#example-paasconfig-with-a-capability","title":"Example PaasConfig with a capability","text":"<p>Below example shows all configuration required to configure a capability.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  clusterwide_argocd_namespace: paas-capabilities-argocd\n  capabilities:\n    mycap:\n      applicationset: mycap-as\n      default_permissions:\n        my-service-account:\n          - my-cluster-role\n      extra_permissions:\n        my-extra-service-account:\n          - my-extra-cluster-role\n      custom_fields:\n        my-custom-key:\n          validation: '^key_[0-9]+$'\n          required: true\n        my-custom-revision:\n          validation: '^(main|develop|feature-.*)$'\n          default: main\n      quotas:\n        clusterwide: true\n        defaults:\n          limits.cpu: \"8\"\n          limits.memory: 8Gi\n          requests.cpu: \"4\"\n          requests.memory: 5Gi\n          requests.storage: \"5Gi\"\n        min:\n          limits.cpu: \"1\"\n          limits.memory: 1Gi\n          requests.cpu: \"500Mi\"\n          requests.memory: 500Mi\n        max:\n          limits.cpu: \"16\"\n          limits.memory: 16Gi\n          requests.cpu: \"16\"\n          requests.memory: 16Gi\n          requests.storage: \"10Gi\"\n          thin.storageclass.storage.k8s.io/persistentvolumeclaims: \"0\"\n        ratio: 0.1\n</code></pre>"},{"location":"administrators-guide/capabilities/#configuring-quota","title":"Configuring quota","text":"<p>For every Capability for every Paas, a separate ClusterResourceQuota is created. Quotas can be set in a Paas, and when not set, the Capability configuration can have a Default which will be used instead. Furthermore, the capability configuration can also have a min and max value set. The Paas operator will use the value as set in the Paas, and these Default, Min and Max settings to come to the proper value to be set in the ClusterResourceQuota set on the namespace. Beyond these options, a capability can also be configured to use cluster-wide Quota with the <code>spec.capabilities[\"new-capability\"].quotas.clusterwide</code> and <code>spec.capabilities[\"new-capability\"].quotas.raio</code>.</p>"},{"location":"administrators-guide/capabilities/#more-info","title":"More info","text":"<p>For more information please check:</p> <ul> <li>administrators-guide's Cluster Wide Quotas section</li> <li>api-guide on capability quota configuration</li> <li>api-guide on capability quota in the Paas</li> </ul>"},{"location":"administrators-guide/capabilities/#configuring-permissions","title":"Configuring permissions","text":"<p>For every capability the Paas operator can grant permissions to service accounts. There are two options:</p> <ul> <li>Default permissions: These permissions are granted for this capability for every Paas</li> <li>Extra permissions: These permissions are granted only when a Paas has set <code>spec.capabilities[capability].extra_permissions</code> to true   The main goal for extra permissions is to start off with higher permissions to get started, and revert them when a lower permissive option is available (e.a. lower permissions are set as default permissions).   Customers starting with extra permissions can test with default permissions and return to extra permissions if they run into issues.</li> </ul>"},{"location":"administrators-guide/capabilities/#more-info_1","title":"More info","text":"<p>For more information on Default permissions and Extra permissions please refer to:</p> <ul> <li>Example PaasConfig with a capability</li> <li>api-guide on capability configuration in the PaasConfig</li> <li>api-guide on capability configuration in the Paas</li> </ul>"},{"location":"administrators-guide/capabilities/#configuring-custom-fields","title":"Configuring custom fields","text":"<p>Capabilities might require options to be set in a Paas. The fields to be set would be specific to a capability. Some examples include:</p> <ul> <li>setting a git url, revision and path for a ArgoCD bootstrap application</li> <li>setting a version for the Keycloak capability</li> <li>deploying multiple streams of a capability and allowing some DevOps teams to run a <code>latest</code> while others run a <code>stable</code> stream</li> </ul> <p>For this reason we have introduced options for setting custom fields in the capability configuration in PaasConfig. Each custom field belongs to a capability (e.a. <code>capability_name</code>), has a field name (e.a. <code>custom_field_name</code>) and configuration. A custom field can be defined in PaasConfig in <code>PaasConfig.spec.capabilities[capability].customfields</code>.</p> <p>The following configuration can be set:</p> <ul> <li>validation: A regular expression used to validate input in a Paas</li> <li>required: When set to true, an error is returned when the custom field is not defined in a Paas</li> <li>default: When set, a Paas without the custom field set will use this default instead.</li> <li>template: When set to a valid go template, the template is processed against the current Paas   and PaasConfig end results are added as one or more custom fields in the ApplicationSet.</li> </ul> <p>Note</p> <p><code>required</code> and <code>default</code> are mutually exclusive.</p> <p>When set, a Paas can set these custom_fields, which brings them to the generators field in the Application created by the ApplicationSet for this specific Paas.</p>"},{"location":"administrators-guide/capabilities/#example-of-how-a-custom-field-operates","title":"Example of how a custom field operates","text":"<p>Imagine that on a cluster with</p> <ul> <li>a PaasConfig as defined in Example PaasConfig with a capability, and</li> <li>an ApplicationSet as defined in Example capability ApplicationSet,   a DevOps engineer created a Paas with a content like:</li> </ul> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  capabilities:\n    mycap:\n      custom_fields:\n        my-custom-key: key_123\n  ...\n</code></pre> <p>The following would happen:</p> <ul> <li>The Paas operator would check all custom_fields and use the following field values:</li> <li>my-custom-key: key_123</li> <li>my-custom-revision main</li> <li>The Paas operator would create an entry in the list generator in the ApplicationSet, with custom fields set as elements</li> <li>The cluster-wide ArgoCD ApplicationSet controller would create a new Application for my-paas-capability-mycap</li> <li>the Application would have the following set in <code>spec.source.kustomize.commonLabels</code>:</li> <li>key: key_123</li> <li>revision: main</li> <li>From here, Kustomize could use these values to be set on all resources create by the cluster-wide ArgoCD for this capability for this Paas</li> </ul>"},{"location":"administrators-guide/capabilities/#templating","title":"Templating","text":"<p>The templating feature allows administrators to dynamically generate values for custom fields in the ApplicationSet without  requiring users to explicitly specify these values in their Paas. This provides flexibility by enabling values to be derived from  the Paas, the PaasConfig, or a combination of both. The template support Go templating syntax, in which all values from the Paas  and PaasConfig can be referenced, more examples below. In addition to the default Go template functions, we've added support for all Sprout Go template functions.</p> <p>For more info on templating, see api-guide on using templating in paas configuration</p>"},{"location":"administrators-guide/capabilities/#notes","title":"Notes:","text":"<ul> <li>Precedence: When a custom field is configured with a template, it will take precedence over other settings like default,  validation, and required. This means that the template value will override any default or validation settings configured for that  field.</li> <li>Overrides: Paas values will take precedence over template values. If a custom field is defined in the Paas, its value will  override the template.</li> <li>Multi-value Fields: Templates return a string, which, if it can be parsed as YAML into a map or list, will result in a  multi-value entry in the ApplicationSet. The custom field name will be suffixed with the map keys or list indexes.</li> <li>Template Validation: For easier validation and debugging of templates, we recommend using Repeat It,  an online tool to test and validate your Go templates.</li> </ul>"},{"location":"administrators-guide/capabilities/#examples","title":"Examples","text":"<p>You can now generate an argocd policy by ranging over the groups in the paas:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  clusterwide_argocd_namespace: paas-capabilities-argocd\n  capabilities:\n    mycap:\n      ApplicationSet: mycap-as\n      custom_fields:\n        argocd-policies:\n          template: |\n            g, system:cluster-admins, role:admin{{ range $groupName, $group := .Paas.Spec.Groups }}\n            g, {{ $groupName }}, role:admin{{end}}\n        my-custom-revision:\n          validation: '^(main|develop|feature-.*)$'\n          default: main\n      quotas:\n        defaults:\n          limits.cpu: \"8\"\n</code></pre> <p>Note</p> <p>In the above example, you see the first line and the range on line 1, and the templated lines and end block on line 2. This causes that for every line a \\n and after that a new row is inserted. This in turn leaves out the ending \\n, which is unwanted.</p> <p>So, if you happen to see a |+ and extra \\n in the resulting appset list generator value, this can be fixed by changing they way all is joined / seperated on lines in the template.</p> <p>You can reference values from the PaasConfig as well by referencing <code>.Config</code>:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  clusterwide_argocd_namespace: paas-capabilities-argocd\n  capabilities:\n    mycap:\n      ApplicationSet: mycap-as\n      custom_fields:\n        debug:\n          template: |\n            {{ .Config.Spec.Debug }}\n        my-custom-revision:\n          validation: '^(main|develop|feature-.*)$'\n          default: main\n      quotas:\n        defaults:\n          limits.cpu: \"8\"\n</code></pre> <p>You can return a map and create multiple keys (string suffix).</p> <p>This would create 2 keys:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  clusterwide_argocd_namespace: paas-capabilities-argocd\n  capabilities:\n    mycap:\n      ApplicationSet: mycap-as\n      custom_fields:\n        \"paas_config\":\n          template: |\n            debug: {{ .Config.Spec.Debug }}\n            argo_enabled: false\n        my-custom-revision:\n          validation: '^(main|develop|feature-.*)$'\n          default: main\n      quotas:\n        defaults:\n          limits.cpu: \"8\"\n</code></pre> <p>Which results in the following applicationSet entries:</p> <p>Example</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: mycap-as\n  namespace: paas-capabilities-argocd\nspec:\n  generators:\n    - list:\n        elements:\n          - paas_config_debug: true\n            paas_config_argo_enabled: false\n  ...\n</code></pre> <p>You can also specify a list in the .Template spec and create multiple keys (number suffix).</p> <p>This would create 3 keys:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  clusterwide_argocd_namespace: paas-capabilities-argocd\n  capabilities:\n    mycap:\n      ApplicationSet: mycap-as\n      custom_fields:\n        \"paas_config\":\n          template: |\n            - {{ .Config.Spec.Debug }}\n            - {{ .Config.Spec.ArgoEnabled }}\n            - custom fields with templating is cool\n        my-custom-revision:\n          validation: '^(main|develop|feature-.*)$'\n          default: main\n      quotas:\n        defaults:\n          limits.cpu: \"8\"\n</code></pre> <p>Like so:</p> <p>Example</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: mycap-as\n  namespace: paas-capabilities-argocd\nspec:\n  generators:\n    - list:\n        elements:\n          - paas_config_0: true\n            paas_config_1: false\n            paas_config_2: custom fields with templating is cool\n  ...\n</code></pre>"},{"location":"administrators-guide/capabilities/#more-info_2","title":"More info","text":"<p>For more information on Custom Fields please revert to:</p> <ul> <li>Example PaasConfig with a capability</li> <li>Example capability ApplicationSet with custom_fields being set as commonLabels</li> <li>api-guide on capability configuration in the PaasConfig</li> <li>api-guide on capability configuration in the Paas</li> </ul>"},{"location":"administrators-guide/capabilities/#configuring-the-applicationset","title":"Configuring the ApplicationSet","text":"<p>Cluster administrators can configure the ApplicationSet to be used for this specific capability. Imagine a cluster-wide ArgoCD to manage capabilities for Paas'es. It is deployed in the namespace <code>paas-capabilities-argocd</code>. To enable any capability, <code>spec.clusterwide_argocd_namespace</code> needs to be set to <code>paas-capabilities-argocd</code>, so that the Paas operator will locate ApplicationSets for capabilities in this namespace. And for a new capability (e.a. <code>new-capability</code>), there should be an ApplicationSet to manage resources for this new capability. This ApplicationSet should be created in <code>paas-capabilities-argocd</code>, and it's name (e.a. <code>new-capability</code>) should be configured in PaasConfig (<code>spec.capabilities[\"new-capability\"].ApplicationSet</code>). After setting this configuration, for every Paas with the capability <code>new-capability</code> defined, the Paas operator will <code>GET</code> the ApplicationSet <code>paas-capabilities-argocd.new-capability</code>, add the Paas to the list generator and update the ApplicationSet definition. This in turn will create a new Application for the capability for this Paas, and ArgoCD will create and manage the resources.</p>"},{"location":"administrators-guide/capabilities/#example-applicationset","title":"Example ApplicationSet","text":"<p>Example</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: mycap-as\n  namespace: paas-capabilities-argocd\nspec:\n  generators: []\n  template:\n    metadata:\n      name: '{{paas}}-capability-mycap'\n    spec:\n      destination:\n        namespace: '{{paas}}-mycap'\n        server: 'https://kubernetes.default.svc'\n      project: '{{paas}}'\n      source:\n        kustomize:\n          commonLabels:\n            capability: mycap\n            clusterquotagroup: '{{requestor}}'\n            paas: '{{paas}}'\n            service: '{{service}}'\n            subservice: '{{subservice}}'\n            key: '{{my-custom-key}}'\n            revision: '{{my-custom-revision}}'\n        path: paas-capabilities/mycap\n        repoURL: 'https://www.github.com/belastingdienst/opr-paas-capabilities.git'\n        targetRevision: main\n      syncPolicy:\n        automated:\n          selfHeal: true\n</code></pre>"},{"location":"administrators-guide/configuration/","title":"Configuring the operator","text":"<p>The Paas Operator is configured using a Custom Resource Definition (CRD) called PaasConfig.</p>"},{"location":"administrators-guide/configuration/#paasconfig","title":"PaasConfig","text":"<p>Administrators can create a resource of kind PaasConfig in order to configure the Paas Operator. The operator will only use a single instance and when adding multiple PaasConfig instances, they will be ignored.</p> <p>The operator will do its best to prevent incorrect configurations from being loaded through a combination of CRD spec level validation and custom verification checks.</p> <p>For details on the layout of a PaasConfig resource, please see the development-guide's api section and more specifically the section on PaasConfigSpec.</p> <p>Alternatively, if you prefer, you could use doc.crds.dev.</p> <p>For an example, see below.</p>"},{"location":"administrators-guide/configuration/#example-paasconfig","title":"Example PaasConfig","text":"<p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  validations:\n    paas:\n      groupNames: \"^[a-z0-9-]*$\"\n  debug: false\n  managed_by_label: argocd.argoproj.io/managed-by\n  requestor_label: level-one-support\n  decryptKeySecret:\n    namespace: paas-system\n    name: example-keys\n  clusterwide_argocd_namespace: prod-argocd\n  quota_label: clusterquotagroup\n  rolemappings:\n    default:\n      - admin\n    edit:\n      - edit\n    view:\n      - view\n    admin:\n      - admin\n  capabilities:\n    argocd:\n      applicationset: prod-paas-argocd\n      default_permissions:\n        argocd-argocd-application-controller:\n          - monitoring-edit\n          - alert-routing-edit\n      custom_fields:\n        git_url:\n          validation: '^ssh:\\/\\/git@scm\\/[a-zA-Z0-9-.\\/]*.git$'\n          required: true\n        git_revision:\n          default: main\n        git_path:\n          default: '.'\n          validation: '^[a-zA-Z0-9.\\/]*$'\n      extra_permissions: {}\n      quotas:\n        clusterwide: false\n        defaults:\n          limits.cpu: \"8\"\n          limits.memory: 8Gi\n          requests.cpu: \"4\"\n          requests.memory: 5Gi\n          requests.storage: \"5Gi\"\n          thin.storageclass.storage.k8s.io/persistentvolumeclaims: \"0\"\n        min: {}\n        max: {}\n        ratio: 0\n    grafana:\n      applicationset: prod-paas-grafana\n      default_permissions: {}\n      extra_permissions: {}\n      quotas:\n        clusterwide: false\n        defaults:\n          limits.cpu: \"2\"\n          limits.memory: 3Gi\n          requests.cpu: \"1\"\n          requests.memory: 1Gi\n          requests.storage: \"2Gi\"\n          thin.storageclass.storage.k8s.io/persistentvolumeclaims: \"0\"\n        min: {}\n        max: {}\n        ratio: 0\n    tekton:\n      applicationset: prod-paas-tekton\n      default_permissions:\n        pipeline:\n          - monitoring-edit\n          - alert-routing-edit\n      extra_permissions: {}\n      quotas:\n        clusterwide: true\n        defaults:\n          limits.cpu: \"5\"\n          limits.memory: 8Gi\n          requests.cpu: \"1\"\n          requests.memory: 2Gi\n          requests.storage: \"100Gi\"\n          thin.storageclass.storage.k8s.io/persistentvolumeclaims: \"0\"\n        min: {}\n        max: {}\n        ratio: 0.1\n    sso:\n      applicationset: prod-paas-sso\n      default_permissions: {}\n      extra_permissions: {}\n      quotas:\n        clusterwide: false\n        defaults:\n          limits.cpu: \"4\"\n          limits.memory: 4Gi\n          requests.cpu: \"2\"\n          requests.memory: 2Gi\n          requests.storage: \"5Gi\"\n          thin.storageclass.storage.k8s.io/persistentvolumeclaims: \"0\"\n        min: {}\n        max: {}\n        ratio: 0\n</code></pre>"},{"location":"administrators-guide/feature-flags/","title":"Configuring features","text":"<p>To offer a configurable path to introduce new features, deprecate obsolete features and fine tune some implemented features, the Paas operator offers feature flags.</p>"},{"location":"administrators-guide/feature-flags/#warn-or-block-groups-with-user-management","title":"Warn or block groups with user management","text":"<p>Currently the only implemented Feature Flag is for the behavior when users have defined usernames in the Paas.Spec.Groups blocks.</p>"},{"location":"administrators-guide/feature-flags/#allow-default","title":"Allow (default)","text":"<p>When specifying <code>allow</code> (or leave empty), the operator reports no errors / warnings.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha1\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  feature_flags:\n    group_user_management: allow\n</code></pre>"},{"location":"administrators-guide/feature-flags/#warn","title":"Warn","text":"<p>The option <code>warn</code> can be used to have the WebHook warn about users being set, without declining the request, and have the controller log warnings to console and the Paas Status block.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  feature_flags:\n    group_user_management: warn\n</code></pre>"},{"location":"administrators-guide/feature-flags/#block","title":"Block","text":"<p>The option <code>block</code> can be set to decline requests with users being set in the Groups block, have the controller log warnings to console and the Paas Status block,  and have the controller remove groups that have previously been defined.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  feature_flags:\n    group_user_management: block\n</code></pre>"},{"location":"administrators-guide/go-templating/","title":"Go Template","text":""},{"location":"administrators-guide/go-templating/#template","title":"Template","text":"<p>The template feature allows administrators to dynamically generate values from information in Paas and/or PaasConfig. This provides flexibility for other organizations using the Paas operator with other business logic.</p>"},{"location":"administrators-guide/go-templating/#syntax","title":"Syntax","text":"<p>Template options support standard Go Template syntax, allowing all values from the Paas and PaasConfig to be referenced. See more examples below. In addition to the default Go Template functions, we've added support for all Sprout Go Template functions.</p>"},{"location":"administrators-guide/go-templating/#behavior-of-multivalued-and-single-valued-results","title":"Behavior of multivalued and single valued results","text":"<p>Depending on the result of the Go Template, one of three things can happen:</p> <ul> <li>if the result can be parsed as a list:</li> <li>The key of the resulting item (label or custom field) is derived from the name of the template, suffixed with an underscore and an integer (number in the list of this item).</li> <li>The value of the resulting item is the direct value of the item in the list</li> <li>if the result can be parsed as map:</li> <li>The key of the resulting item (label or custom field) is derived from the name of the template, suffixed with an underscore and the key of the map item</li> <li>The value of the resulting item is the direct value of the map item</li> <li>If the result is not parsable as list or map:</li> <li>The key of the resulting item (label or custom field) is derived from the name of the template</li> <li>The value of the resulting item is derived from the exact returned string</li> </ul> <p>Note</p> <p>If you need to return a map or list as a single string value in a field, you have the following options: - convert the map to a string representation using toYaml or toJson, and add quoting to make sure it is parsed as one string - create a map with one key/value pair and set the resulting string as the value</p>"},{"location":"administrators-guide/go-templating/#developing-go-templates","title":"Developing Go Templates","text":"<p>For easier validation and debugging of templates, we recommend using Repeat It, an online tool to test and validate your Go Templates.</p>"},{"location":"administrators-guide/go-templating/#implementations","title":"Implementations","text":""},{"location":"administrators-guide/go-templating/#labels-with-go-templating","title":"Labels with go templating","text":"<p>Administrators can define labels to be added to resources managed by a Paas. The implementation is based on Go Templating, and has the Paas and Resource as inputs. This feature can be used to:</p> <ul> <li>copy labels (or annotations) from the Paas, (or PaasConfig) to labels on the specific resource</li> <li>use specific fields in the Paas (or PaasConfig) to define extra labels</li> </ul> <p>Note</p> <p>This feature replaces certain hardcoded implementations that were previously implemented. If you want to keep the behavior, please add the following to your PaasConfig:</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  ...\n  templating:\n    clusterQuotaLabels:\n      \"\": '{{ range $key, $value := .Paas.Labels }}{{ if ne $key \"app.kubernetes.io/instance\" }}{{$key}}: {{$value}}\\n{{end}}{{end}}'\n    groupLabels:\n      \"\": '{{ range $key, $value := .Paas.Labels }}{{ if ne $key \"app.kubernetes.io/instance\" }}{{$key}}: {{$value}}\\n{{end}}{{end}}'\n    namespaceLabels:\n      \"\": '{{ range $key, $value := .Paas.Labels }}{{ if ne $key \"app.kubernetes.io/instance\" }}{{$key}}: {{$value}}\\n{{end}}{{end}}'\n      \"argocd.argoproj.io/managed-by\": \"{{ .Paas.Spec.ManagedByPaas | default .Paas.Name }}-argocd\"\n    roleBindingLabels:\n      \"\": '{{ range $key, $value := .Paas.Labels }}{{ if ne $key \"app.kubernetes.io/instance\" }}{{$key}}: {{$value}}\\n{{end}}{{end}}'\n</code></pre>"},{"location":"administrators-guide/go-templating/#capability-fields-with-go-template","title":"Capability fields with Go Template","text":""},{"location":"administrators-guide/go-templating/#custom-fields-per-capability","title":"Custom fields per capability","text":"<p>The Paas operator allows administrator to define custom fields which can be set by requestors and end up as fields in the list generator in the ApplicationSet that defines the Application for the capability for the Paas.</p> <p>For more info, see api-guide on capability custom field configuration in the Paas</p>"},{"location":"administrators-guide/go-templating/#custom-fields-for-all-capabilities","title":"Custom fields for all capabilities","text":"<p>In addition to setting custom fields for specific capabilities, the Paas operator also allows administrators to define custom fields that apply to all capabilities. There are two main differences: 1. These custom fields cannot be overruled by a custom field for a specific Paas 2. These custom fields are generically applied to all capabilities.</p> <p>Note</p> <p>This feature replaces certain hardcoded implementations that were previously implemented. If you want to keep the behavior, please add the following to your PaasConfig:</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  ...\n  templating:\n    genericCapabilityFields:\n      requestor: \"{{ .Paas.Spec.Requestor }}\",\n      service: \"{{ (splitn \\\"-\\\" 2 .Paas.Name)._0 }}\",\n      subservice: \"{{ (splitn \\\"-\\\" 2 .Paas.Name)._1 }}\",\n</code></pre>"},{"location":"administrators-guide/go-templating/#examples","title":"Examples","text":"<p>This chapter shows some examples of Go Templates that are used in this project and explains how they work and why they are phrased as such.</p>"},{"location":"administrators-guide/go-templating/#rbac-block","title":"RBAC block","text":"<p>The following example loops through the groups in the paas spec and generates a RBAC line for every group</p> <p>Example</p> <pre><code>g, system:cluster-admins, role:admin{{ range $groupName, $group := .Paas.Spec.Groups }}\ng, {{ $groupName }}, role:admin{{end}}\n...\n</code></pre>"},{"location":"administrators-guide/go-templating/#reference-paasconfig-values","title":"Reference PaasConfig values","text":"<p>You can reference values from the PaasConfig as well by referencing <code>.Config</code>:</p> <p>Example</p> <pre><code>{{ .Config.Spec.Debug }}\n</code></pre>"},{"location":"administrators-guide/go-templating/#return-multiple-keys-as-a-map","title":"Return multiple keys as a map","text":"<p>Your template could return a map (using <code>key: value</code> formatting) to return multiple key/value pairs</p> <p>Example</p> <pre><code>debug: {{ .Config.Spec.Debug }}\nargo: {{ .Config.Spec.ArgoEnabled }}\n</code></pre> <p>This would return two key/value pairs. If name of the template would be set to <code>my_map</code>, values would have keys <code>my_map_debug</code> and <code>my_map_argo</code>.</p>"},{"location":"administrators-guide/go-templating/#return-multiple-keys-as-a-list","title":"Return multiple keys as a list","text":"<p>Your template could return a list (using <code>- value</code> formatting) to return multiple key/value pairs.</p> <p>Example</p> <pre><code>- {{ .Config.Spec.Debug }}\n- {{ .Config.Spec.ArgoEnabled }}\n- custom fields with templating is cool\n</code></pre> <p>This would return three key/value pairs. If name of the template would be set to <code>my_list</code>, values would have keys <code>my_list_0</code> and <code>my_list_1</code>.</p>"},{"location":"administrators-guide/go-templating/#adding-all-labels-except-for-a-specific-key","title":"Adding all labels, except for a specific key","text":"<p>Ideally this could be done using the omit dict function, but unfortunately, the dict is implemented as map[string]any, and labels are implemented as <code>map[string]string</code> and go does not automatically convert.</p> <p>We have used a range and if statement to create all key/value pairs one by one. Note that the Go Template is spread across multiple lines. This ensures that each key is placed on a separate line, and is thus correctly parsed as an individual key/value pair.</p> <p>Example</p> <pre><code>{{ range $key, $value := .Paas.Labels }}{{ if ne $key \"app.kubernetes.io/instance\" }}{{$key}}: {{$value}}\n{{end}}{{end}}\n</code></pre>"},{"location":"administrators-guide/install/","title":"Introduction","text":"<p>Deploy the operator using the following command:</p> <pre><code>kubectl apply -f https://github.com/belastingdienst/opr-paas/releases/latest/download/install.yaml\nkubectl apply -f https://raw.githubusercontent.com/belastingdienst/opr-paas/refs/heads/main/examples/resources/_v1alpha2_paasconfig.yaml\n</code></pre> <p>The second command will load an example PaasConfig resource from the main branch to get you going. Feel free to replace this with your own or a release specific version instead.</p> <p>This will install the operator using the <code>install.yaml</code> that was generated for the latest release. It will create:</p> <ul> <li>a namespace called <code>paas-system</code>;</li> <li>3 CRDs (<code>Paas</code>, <code>PaasNs</code> and <code>PaasConfig</code>);</li> <li>a service account, role, role binding, cluster role &amp; cluster role binding for   all permissions required by the operator; As the operator binds role for others the serviceaccount gets the: <code>bind</code> permission.   It is advised to follow the principle of least privilege and scope the <code>permission</code> to only allow binding of the roles set in your   operator config by setting <code>resourcesNames</code> in your role.yaml</li> <li>a viewer &amp; an editor cluster role for all crds;</li> <li>a deployment running the operator;</li> </ul> <p>Feel free to change config as required.</p>"},{"location":"administrators-guide/secrets/","title":"Secret encryption","text":"<p>The Paas operator includes features to manage secrets in namespaces of a Paas.</p> <p>Secrets are encrypted using asymmetric encryption and therefore require a public and private keypair. Keypairs must be generated, after which the Private Keys must be added to the k8s secret configured in the <code>PaasConfig.spec.privateKeySecret</code>, and the public key must be provided to Users for encrypting the ssh Secrets (either directly, or through the web service).</p>"},{"location":"administrators-guide/secrets/#generating-new-secrets","title":"Generating new secrets","text":"<p>New keys can be easily generated using the crypttool. You can download the crypttool from the Downloads section of its repository.</p> <p>Once downloaded, the crypttool can be used to generate a keypair as follows:</p> <p>Example</p> <pre><code>cd $(mktemp -d)\ncrypttool generate --privateKeyFile private.bin --publicKeyFile public.bin\n</code></pre>"},{"location":"administrators-guide/secrets/#deploying-new-secrets","title":"Deploying new secrets","text":"<p>Once generated, the private key should be added to the secret configured in the <code>PaasConfig.spec.privateKeySecret</code>.</p> <p>Note</p> <p>The secret as configured in the <code>PaasConfig.spec.privateKeySecret</code> can hold multiple keys. This feature is implemented so that key rotation (generating, deploying and reencryption) do not need to be performed instantly. The Paas operator tries to decrypt with all secrets and detects a successful decryption from one of the supplied keys.</p> <p>For the next Paas reconciliation, the change is detected, and the new private key will (also) be tried for decryption.</p>"},{"location":"administrators-guide/secrets/#supplying-a-new-public-key","title":"Supplying a new public key","text":""},{"location":"administrators-guide/secrets/#directly","title":"Directly","text":"<p>Once generated, the public key should be supplied to users that encrypt secrets. They can be supplied directly, so that users can use the crypttool for encryption. For more info, please refer to user docs on Secrets.</p>"},{"location":"administrators-guide/secrets/#running-the-webservice","title":"Running the webservice","text":"<p>Another option is to run the webservice. To enable the webservice enable the webservice manifest:</p> <p>Example</p> <pre><code>cd $(mktemp -d)\ngit clone https://github.com/belastingdienst/opr-paas.git\ncd opr-paas/manifests/default &amp;&amp; \\\nkustomize edit set image controller=\"ghcr.io/belastingdienst/opr-paas\" &amp;&amp; \\\nkustomize edit set image webservice=\"ghcr.io/belastingdienst/webservice\" &amp;&amp; \\\nkustomize edit add resource ../webservice &amp;&amp; \\\nkustomize build . | kubectl apply -f -\n</code></pre> <p>After that you can replace the publicKey data in the paas-secrets-publickey ConfigMap, k8s changes the mount and the webservice automatically picks up the file changes and uses the new key.</p> <p>Warning: starting v1.4.0</p> <p>When deploying the webservice, you will be required to add an environment variable called <code>PAAS_WS_ALLOWED_ORIGINS</code> in which you either give <code>*</code> or one or more CORS related origins, comma separated.</p> <p>By default, the webservice will be deployed using <code>http://www.example.com</code> as a value. This will not work for you.</p>"},{"location":"administrators-guide/secrets/#reencryption","title":"Reencryption","text":"<p>A proper encryption product also has options to cycle the encrypted data. With the secrets implementation in the operator, this is implemented with the crypttool.</p> <p>Steps are:</p> <ul> <li>generate new keys</li> <li>deploy new keys</li> <li>for every paas:</li> <li>check that original key still works</li> <li>reencrypt with original private key and newly created public key</li> <li>update reencrypted paas</li> <li>(optionally) remove original key</li> </ul> <p>Note</p> <p>Reencryption requires the original private key which only admins should have access to.</p> <p>Example</p> <pre><code>set -o\ncd $(mktemp -d)\nkubectl get paas -o name | while read -r PAAS; do\n  kubectl get paas \"${PAAS}\" &gt; \"${PAAS}.yaml\"\n  crypttool check-paas --privateKeyFiles ~/Downloads/oldpriv &gt; \"${PAAS}.pre.out\"\n  crypttool reencrypt --privateKeyFiles ~/Downloads/oldpriv --publicKeyFile ~/Downloads/newpublicKey \"${PAAS}.yaml\"\n  crypttool check-paas --privateKeyFiles ~/Downloads/oldpriv &gt; \"${PAAS}.post.out\"\n  kubectl apply -f \"${PAAS}.yaml\"\ndone\n</code></pre>"},{"location":"administrators-guide/security/","title":"Introduction","text":"<p>For any piece of software, security is of paramount concern. With the Paas operator, we aim to provide safe, secure and sane defaults for our settings. If you have any improvements you'd like to share, feel free to create an issue or a pull request (PR) in our source code repository.</p> <p>For more information on contributing to this project, please see the Contributing section, Developers Guide section in this documentation and the <code>CONTRIBUTING.md</code> file in the root of our source code repository.</p> <p>Should you find a security issue, please refer to the Raising security issues section.</p>"},{"location":"administrators-guide/security/#things-to-be-aware-of","title":"Things to be aware of","text":""},{"location":"administrators-guide/security/#automount-is-set-to-true","title":"Automount is set to true","text":"<p>The operator makes use of a service account token that is used to communicate with the Kubernetes APIs. This service account token is automatically mounted using K8S's automount feature.</p> <p>It is a common best-practice for normal pods to opt-out of automatically mounting a service account token using <code>automountServiceAccountToken: false</code>.</p> <p>However, since this concerns an operator that needs the service account for most things it does, we have opted to keep the token auto-mounted.</p>"},{"location":"administrators-guide/v1alpha1-conversion/","title":"Introduction","text":"<p>With release v2 we also released a new api v1alpha2 which has a slightly changed definition. The following has changed between v1alpha1.PaasConfig and v1alpha2.PaasConfig:</p> <ul> <li>The following endpoints where deprecated in v1alpha1 and have been removed in v1alpha2:</li> <li>GroupSyncList, GroupSyncListKey, LDAP     (we no longer manage the LDAP GroupSyncList implementation)</li> <li>ArgoPermissions, ArgoEnabled, ExcludeAppSetName     (these setting belong to a hardcoded implementation which is replaced by a more flexible implementation)</li> <li>A new label implementation replaces the following label options which are removed in v1alpha2</li> <li>RequestorLabel</li> <li>ManagedByLabel</li> <li>ManagedBySuffix</li> <li>note QuotaLabel is replaced, will be deprecated in v1alpha2 and removed in v1alpha3</li> </ul> <p>Additionally, some new implementations require additional config. Which is documented in the rest of the  Administrators guide, but documented here as well, so that Administrators converting from v1alpha1 to v1alpha2 also add these changes as part of the PaasConfig migration process.</p>"},{"location":"administrators-guide/v1alpha1-conversion/#conversion","title":"Conversion","text":"<p>The Paas operator can work with both v1alpha1 and v1alpha2. Internally v1alpha1.PaasConfig is converted and stored as v1alpha2.PaasConfig, and converted back if the client requests a v1alpha1.PaasConfig. Switching to v1alpha2.PaasConfig is therefore recommended, but can be separately from deploying v2.</p>"},{"location":"administrators-guide/v1alpha1-conversion/#changing-v1alpha1-to-v1alpha2","title":"Changing v1alpha1 to v1alpha2","text":""},{"location":"administrators-guide/v1alpha1-conversion/#removing-deprecated-fields","title":"Removing deprecated fields","text":"<p>The following fields in PaasConfig.Spec are removed in v1alpha2 and should be removed from the PaasConfig: - argoenabled - argopermissions - exclude_appset_name - groupsynclist - groupsynclist_key - ldap</p>"},{"location":"administrators-guide/v1alpha1-conversion/#adding-custom-fields-with-validations","title":"Adding custom fields with validations","text":"<p>With v2, the previous implementation (hardcoded fields in all capabilities, just required by ArgoCD) is removed. There is now only Custom fields. We advise to add the following custom fields to your argocd capability:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: learn-paas-config\nspec:\n  capabilities:\n    argocd:\n      custom_fields:\n        git_url:\n          required: true\n        git_revision:\n          default: \"master\"\n        git_path:\n          default: \".\"\n</code></pre>"},{"location":"administrators-guide/v1alpha1-conversion/#labels-and-capability-fields","title":"Labels and Capability fields","text":"<ul> <li>Custom fields for all capabilities</li> <li>Labels with go templating (v3 only)</li> </ul>"},{"location":"administrators-guide/validations/","title":"Introduction","text":"<p>Most fields in the CRD are checked directly with kubebuilder validations, But some fields can be validated with a regular expression that is configurable through the PaasConfig:</p> <p>Below snippet shows how validations can be configured for the complete set of vailable validations:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  validations:\n    paas:\n      # Validate name of Paas\n      name: \"^[a-z0-9-]*$\"\n      # Validate name of groups in paas\n      groupName: \"^[a-z0-9-]*$\"\n      # Validate name of namespaces in paas\n      namespaceName: \"^[a-z0-9-]*$\"\n      # Validate requestor field in paas\n      requestor: \"^[a-z0-9-]*$\"\n    paasConfig:\n      # Validate name of capability in config\n      capabilityName: \"^[a-z0-9-]*$\"\n    paasNs:\n      # Validate name of paasNs\n      name: \"^[a-z0-9-]*$\"\n...\n</code></pre> <p>Note</p> <p>If only one of <code>PaasConfig.spec.validations.paas.namespaceName</code>, and <code>PaasConfig.validations.paasNs.name</code> is set, both PaasNs names and Paas.Spec.Namespaces are validated with the same validation rule.</p>"},{"location":"administrators-guide/cluster-wide-quotas/basic-usage/","title":"Basic usage of CWQs","text":"<p>With Cluster Wide Quotas, cluster admins can bring all resources for all Paas'es  belonging to a capability together in one cluster wide resource pool. This brings down over commit at the expense of the risks associated with resource sharing.</p>"},{"location":"administrators-guide/cluster-wide-quotas/basic-usage/#use-a-quota-per-paas","title":"Use a quota per Paas","text":"<p>Set:</p> <ul> <li><code>paasconfig.spec.capabilities['tekton'].quotas.clusterwide</code> to <code>false</code></li> </ul>"},{"location":"administrators-guide/cluster-wide-quotas/basic-usage/#use-cwqs-with-one-hard-set-value","title":"Use CWQs with one hard-set value","text":"<p>You can use CWQs with a single hard-set value (e.a. 10).</p> <p>Set:</p> <ul> <li><code>paasconfig.spec.capabilities['tekton'].quotas.clusterwide</code> to <code>true</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.ratio</code> to <code>0</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.min</code> to <code>10</code></li> </ul>"},{"location":"administrators-guide/cluster-wide-quotas/basic-usage/#use-cwqs-with-autoscaling","title":"Use CWQs with autoscaling","text":"<p>You can use cluster wide quotas with an autoscaling feature.</p> <p>For this example: every Paas is expected to use 1 CPU, and a minimum of 3 CPU should always be available. Additionally, a maximum of 10 CPU can be reserved, and we scale down to 10% of normal usage.</p> <p>Set:</p> <ul> <li><code>paasconfig.spec.capabilities['tekton'].quotas.clusterwide</code> to <code>true</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.default</code> to <code>1</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.default</code> to <code>1</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.min</code> to <code>3</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.max</code> to <code>10</code></li> <li><code>paasconfig.spec.capabilities['tekton'].quotas.ratio</code> to <code>0.1</code> (10%)</li> </ul>"},{"location":"administrators-guide/cluster-wide-quotas/benefits/","title":"Benefits of using CWQs","text":"<p>The following is a good example of the benefits when implementing cluster wide quotas. The example makes use of Tekton.</p>"},{"location":"administrators-guide/cluster-wide-quotas/benefits/#without-cluster-wide-quotas","title":"Without Cluster Wide Quotas","text":"<p>Without Cluster Wide Quotas, every Tekton namespace would be linked to a specific cluster quota. All of these quota would add up to a considerable total quota reservation.</p> <p>However, since Tekton pipelines only rarely actually use these quotas on average about 99% of quota would always be unused. The cluster would either be considerably over committed or underutilized.</p>"},{"location":"administrators-guide/cluster-wide-quotas/benefits/#with-cluster-wide-quotas","title":"With Cluster Wide Quotas","text":"<p>By enabling Cluster Wide Quotas, all Tekton namespaces will be linked to one cluster wide quota.</p> <p>The Cluster Wide Quota can be automatically tuned by the Paas operator, having a minimum, maximum, default, and ratio value.</p> <p>The algorithm comes down to using the largest value out of 3 different calculations:</p> <ul> <li>ratio (Paas config) * sum of all Paas resources (either defined or default);</li> <li>sum of the largest two of all Paas quotas (either defined or defaulted);</li> <li>a hard set minimum (Paas config);</li> </ul> <p>Furthermore, a maximum value (Paas config) can be set to cap the quota.</p>"},{"location":"administrators-guide/cluster-wide-quotas/benefits/#example-with-numbers","title":"Example with numbers","text":"<p>Consider the following values being set in the Paas config (e.a. for <code>cpu.limits</code>):</p> cluster wide config min value 10 When set, every cluster wide quota has at least this amount. max value 20 When set, every cluster wide quota has at most this amount. default 5 Resources can be set in Paas. When not set in Paas, this default is used. ratio 0,3 Scales the sum of all quotas (all Paas'es) down to a lower value for cluster wide quota. <p>Now imagine that we would have a cluster where one by one new Paas'es would be created, with Tekton enabled, all using the default quota config.</p> <p>Quota reservations would be along lines of:</p> # of PAASes CWQ disabled Scale by ratio Scale with min values Scale with hardset min Scale with min &amp; max Savings 1 5 1,5 10,0 13,0 13,0 -8,0 2 10 3,0 10,0 13,0 13,0 -3,0 3 15 4,5 10,0 13,0 13,0 2,0 4 20 6,0 10,0 13,0 13,0 7,0 5 25 7,5 10,0 13,0 13,0 12,0 6 30 9,0 10,0 13,0 13,0 17,0 7 35 10,5 10,5 13,0 13,0 22,0 8 40 12,0 12,0 13,0 13,0 27,0 9 45 13,5 13,5 13,5 13,5 31,5 10 50 15,0 15,0 15,0 15,0 35,0 11 55 16,5 16,5 16,5 16,5 38,5 12 60 18,0 18,0 18,0 18,0 42,0 13 65 19,5 19,5 19,5 19,5 45,5 14 70 21,0 21,0 21,0 20,0 50,0 15 75 22,5 22,5 22,5 20,0 55,0 16 80 24,0 24,0 24,0 20,0 60,0 17 85 25,5 25,5 25,5 20,0 65,0 18 90 27,0 27,0 27,0 20,0 70,0 19 95 28,5 28,5 28,5 20,0 75,0 <p>Visualized in a graph, it would look like this:</p> <p></p> <p>Once 10 Paas'es would be created:</p> <ul> <li>without CWQ's, about 50 CPU limits would be reserved for all Tekton namespaces;</li> <li>with a ratio of 0.3 only 15 would be reserved, saving 35 CPU limits;</li> </ul> <p>Beyond 14 Paas'es, there would only be 20 CPUs reserved no matter how much Paas'es would be created.</p>"},{"location":"development-guide/","title":"Contributing to Paas source code","text":"<p>If you want to contribute to the source code of the Paas operator and innovate in the database in Kubernetes space, this is the right place. Welcome!</p> <p>We have a truly open source soul. That's why we welcome new contributors. Our goal is to enable you to become the next committer of Paas, by having a good set of docs that guide you through the development process. Having said this, we know that everything can always be improved, so if you think our documentation is not up to scratch, please let us know or provide a pull request based on your experience.</p>"},{"location":"development-guide/#development-workflow","title":"Development workflow","text":"<p>The Paas operator project follows trunk-based development, with the <code>main</code> branch representing the trunk.</p> <p>We adopt the \"Github Flow\" development workflow, with some customizations:</p> <ul> <li>the Continuous Delivery   branch is called <code>main</code> and is protected;</li> <li>GitHub is configured for linear development (no merge commits);</li> <li>development happens in separate branches created from the <code>main</code> branch and   called \"dev/ISSUE_ID\";</li> <li>once completed, developers must submit a pull request;</li> <li>reviews by two different maintainers are required before a pull request can be   merged;</li> </ul> <p>We also adopted the conventional commit format for commit messages.</p> <p>The roadmap is defined as a Github Project.</p> <p>Finally, we have an operational Kanban board we use to organize the flow of items.</p>"},{"location":"development-guide/#your-development-environment-for-paas","title":"Your development environment for Paas","text":"<p>In order to write even the simplest patch for Paas you must have set up your workstation to build and locally test the version of the operator you are developing.</p>"},{"location":"development-guide/#submit-a-pull-request","title":"Submit a pull request","text":"<p>First and foremost: as a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays. Please do not ever hesitate to ask a question or send a PR.</p> <p>IMPORTANT: before you submit a pull request, please read this document from the Istio documentation which contains very good insights and best practices: \"Writing Good Pull Requests\".</p> <p>If you have written code for an improvement to Paas or a bug fix, please follow this procedure to submit a pull request:</p> <ol> <li>Create a personal fork of the Paas Operator project;</li> <li>If there is a related issue, please leave a comment that you intend to work on it;</li> <li>Run the e2e tests in the forked repository, see our related documentation;</li> <li>Once development is finished, create a pull request from your forked project    to the Paas project;</li> </ol> <p>Please make sure the pull request title and message follow Conventional Commits For more details on submitting a PR, see \"Submitting A PR\".</p> <p>One of the maintainers will then proceed with the first review and approve the CI workflow to run in the Paas project.  The second reviewer will run end-to-end test against the changes in fork pull request. If testing passes, the pull request will be labeled with <code>ok-to-merge</code> and will be ready for merge.</p>"},{"location":"development-guide/#sign-your-work","title":"Sign your work","text":"<p>We use the Developer Certificate of Origin (DCO) as an additional safeguard for the Paas project. This is a well established and widely used mechanism to assure contributors have confirmed their right to license their contribution under the project's license.</p> <p>Please read https://developercertificate.org.</p> <p>If you can certify it, then just add a line to every git commit message:</p> <pre><code>  Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;\n</code></pre> <p>or use the command <code>git commit -s -m \"commit message comes here\"</code> to sign-off on your commits.</p> <p>Use your real name (sorry, no pseudonyms or anonymous contributions). If you set your <code>user.name</code> and <code>user.email</code> git configs, you can sign your commit automatically with <code>git commit -s</code>.</p> <p>You can also use git aliases like <code>git config --global alias.ci 'commit -s'</code>. Now you can commit with <code>git ci</code> and the commit will be signed.</p>"},{"location":"development-guide/00_api/","title":"API Reference","text":""},{"location":"development-guide/00_api/#packages","title":"Packages","text":"<ul> <li>cpet.belastingdienst.nl/v1alpha1</li> <li>cpet.belastingdienst.nl/v1alpha2</li> </ul>"},{"location":"development-guide/00_api/#cpetbelastingdienstnlv1alpha1","title":"cpet.belastingdienst.nl/v1alpha1","text":"<p>Package v1alpha1 contains API Schema definitions for the  v1alpha1 API group</p>"},{"location":"development-guide/00_api/#resource-types","title":"Resource Types","text":"<ul> <li>Paas</li> <li>PaasConfig</li> <li>PaasConfigList</li> <li>PaasList</li> <li>PaasNS</li> <li>PaasNSList</li> </ul>"},{"location":"development-guide/00_api/#configargopermissions","title":"ConfigArgoPermissions","text":"<p>Deprecated: ArgoCD specific code will be removed from the operator</p> <p>Appears in: - PaasConfigSpec</p> Field Description Default Validation <code>default_policy</code> string Deprecated: ArgoCD specific code will be removed from the operatorThe optional default policy which is set in the ArgoCD instance Optional: {}  <code>resource_name</code> string Deprecated: ArgoCD specific code will be removed from the operatorThe name of the ArgoCD instance to apply ArgoPermissions to MinLength: 1 Required: {}  <code>role</code> string Deprecated: ArgoCD specific code will be removed from the operatorThe name of the role to add to Groups set in ArgoPermissions MinLength: 1 Required: {}  <code>header</code> string Deprecated: ArgoCD specific code will be removed from the operatorThe header value to set in ArgoPermissions MinLength: 1 Required: {}"},{"location":"development-guide/00_api/#configcapperm","title":"ConfigCapPerm","text":"<p>Underlying type: object</p> <p>Appears in: - ConfigCapability</p>"},{"location":"development-guide/00_api/#configcapabilities","title":"ConfigCapabilities","text":"<p>Underlying type: map[string]ConfigCapability</p> <p>Appears in: - PaasConfigSpec</p>"},{"location":"development-guide/00_api/#configcapability","title":"ConfigCapability","text":"<p>Appears in: - ConfigCapabilities</p> Field Description Default Validation <code>applicationset</code> string Name of the ArgoCD ApplicationSet which manages this capability MinLength: 1 Required: {}  <code>quotas</code> ConfigQuotaSettings Quota settings for this capability Required: {}  <code>extra_permissions</code> ConfigCapPerm Extra permissions set for this capability Optional: {}  <code>default_permissions</code> ConfigCapPerm Default permissions set for this capability Optional: {}  <code>custom_fields</code> object (keys:string, values:ConfigCustomField) Settings to allow specific configuration specific to a capability"},{"location":"development-guide/00_api/#configcustomfield","title":"ConfigCustomField","text":"<p>Appears in: - ConfigCapability</p> Field Description Default Validation <code>validation</code> string Regular expression for validating input, defaults to '', which means no validation. Optional: {}  <code>default</code> string Set a default when no value is specified, defaults to ''.Only applies when Required is false. Optional: {}  <code>template</code> string You can now use a go-template string to use Paas and PaasConfig variables and compile a value Optional: {}  <code>required</code> boolean Define if the value must be specified in the PaaS.When set to true, and no value is set, PaasNs has error in status field, and capability is not built.When set to false, and no value is set, Default is used. Optional: {}"},{"location":"development-guide/00_api/#configldap","title":"ConfigLdap","text":"<p>Appears in: - PaasConfigSpec</p> Field Description Default Validation <code>host</code> string LDAP server hostname MinLength: 1 Required: {}  <code>port</code> integer LDAP server port Minimum: 1 Required: {}"},{"location":"development-guide/00_api/#configquotasettings","title":"ConfigQuotaSettings","text":"<p>Appears in: - ConfigCapability</p> Field Description Default Validation <code>clusterwide</code> boolean Is this a clusterwide quota or not false Optional: {}  <code>ratio</code> float The ratio of the requested quota which will be applied to the total quota Format: float Maximum: 1 Minimum: 0 Optional: {}  <code>defaults</code> object (keys:ResourceName, values:Quantity) The default quota which the enabled capability gets Required: {}  <code>min</code> object (keys:ResourceName, values:Quantity) The minimum quota which the enabled capability gets Optional: {}  <code>max</code> object (keys:ResourceName, values:Quantity) The maximum quota which the capability gets Optional: {}"},{"location":"development-guide/00_api/#configrolemappings","title":"ConfigRoleMappings","text":"<p>Underlying type: object</p> <p>Appears in: - PaasConfigSpec</p>"},{"location":"development-guide/00_api/#namespacedname","title":"NamespacedName","text":"<p>Appears in: - PaasConfigSpec</p> Field Description Default Validation <code>name</code> string MinLength: 1 Required: {}  <code>namespace</code> string MinLength: 1 Required: {}"},{"location":"development-guide/00_api/#paas","title":"Paas","text":"<p>Paas is the Schema for the paas API</p> <p>Appears in: - PaasList</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha1</code> <code>kind</code> string <code>Paas</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PaasSpec"},{"location":"development-guide/00_api/#paascapabilities","title":"PaasCapabilities","text":"<p>Underlying type: map[string]PaasCapability</p> <p>PaasCapabilities holds all capabilities enabled in a Paas</p> <p>Appears in: - PaasSpec</p>"},{"location":"development-guide/00_api/#paascapability","title":"PaasCapability","text":"<p>PaasCapability holds all information for a capability</p> <p>Appears in: - PaasCapabilities</p> Field Description Default Validation <code>enabled</code> boolean Do we want to use this capability, default false Optional: {}  <code>gitUrl</code> string The URL that contains the Applications / Application Sets to be used by this capability Optional: {}  <code>gitRevision</code> string The revision of the git repo that contains the Applications / Application Sets to be used by this capability Optional: {}  <code>gitPath</code> string the path in the git repo that contains the Applications / Application Sets to be used by this capability Optional: {}  <code>custom_fields</code> object (keys:string, values:string) Custom fields to configure this specific Capability Optional: {}  <code>quota</code> Quota This project has its own ClusterResourceQuota settings Optional: {}  <code>sshSecrets</code> object (keys:string, values:string) You can add ssh keys (which is a type of secret) for capability to use for access to bitBucketThey must be encrypted with a public key, for which the private key should be added to the DecryptKeySecret Optional: {}  <code>extra_permissions</code> boolean You can enable extra permissions for the service accounts belonging to this capabilityExact definitions is configured in Paas Configmap Optional: {}"},{"location":"development-guide/00_api/#paasconfig","title":"PaasConfig","text":"<p>Appears in: - PaasConfigList</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha1</code> <code>kind</code> string <code>PaasConfig</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PaasConfigSpec"},{"location":"development-guide/00_api/#paasconfiglist","title":"PaasConfigList","text":"<p>PaasConfigList contains a list of PaasConfig</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha1</code> <code>kind</code> string <code>PaasConfigList</code> <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> PaasConfig array"},{"location":"development-guide/00_api/#paasconfigspec","title":"PaasConfigSpec","text":"<p>Appears in: - PaasConfig</p> Field Description Default Validation <code>decryptKeySecret</code> NamespacedName DecryptKeysSecret is a reference to the secret containing the DecryptKeys Required: {}  <code>debug</code> boolean Enable debug information generation or not false Optional: {}  <code>capabilities</code> ConfigCapabilities A map with zero or more ConfigCapability Optional: {}  <code>groupsynclist</code> NamespacedName Deprecated: GroupSyncList code will be removed from the operator to make it more genericA reference to a configmap containing a groupsynclist of LDAP groups to be synced using LDAP sync Required: {}  <code>groupsynclist_key</code> string Deprecated: GroupSyncListKey code will be removed from the operator to make it more genericA key in the configures GroupSyncList which will contain the LDAP groups to be synced using LDAP sync groupsynclist.txt Optional: {}  <code>ldap</code> ConfigLdap LDAP configuration for the operator to add to Groups Optional: {}  <code>argopermissions</code> ConfigArgoPermissions Deprecated: ArgoCD specific code will be removed from the operatorPermissions to set for ArgoCD instance Optional: {}  <code>argoenabled</code> boolean Deprecated: ArgoCD specific code will be removed from the operatorOption to enable or disable ArgoCD specific Code true Optional: {}  <code>clusterwide_argocd_namespace</code> string Namespace in which a clusterwide ArgoCD can be found for managing capabilities and appProjectsDeprecated: ArgoCD specific code will be removed from the operator MinLength: 1 Required: {}  <code>quota_label</code> string Label which is added to clusterquotas clusterquotagroup Optional: {}  <code>requestor_label</code> string Name of the label used to define who is the contact for this resource requestor Optional: {}  <code>managed_by_label</code> string Name of the label used to define by whom the resource is managed. argocd.argoproj.io/managed-by Optional: {}  <code>managed_by_suffix</code> string Deprecated: ManagedBySuffix is a temporary implementation, to be replaced by go template functionalityonce availableSuffix to be appended to the managed-by-label argocd Optional: {}  <code>exclude_appset_name</code> string Deprecated: ArgoCD specific code will be removed from the operatorName of an ApplicationSet to be set as ignored in the ArgoCD bootstrap Application Optional: {}  <code>rolemappings</code> ConfigRoleMappings Grant permissions to all groups according to config in configmap and role selected per group in paas. Optional: {}  <code>validations</code> PaasConfigValidations Set regular expressions to have the webhooks validate the fields Optional: {}"},{"location":"development-guide/00_api/#paasconfigtypevalidations","title":"PaasConfigTypeValidations","text":"<p>Underlying type: object</p> <p>PaasConfigTypeValidations can have custom validations for a specific CRD (e.a. paas, paasConfig or PaasNs). Refer to https://belastingdienst.github.io/opr-paas/latest/administrators-guide/validations/ for more info.</p> <p>Appears in: - PaasConfigValidations</p>"},{"location":"development-guide/00_api/#paasconfigvalidations","title":"PaasConfigValidations","text":"<p>Underlying type: map[string]PaasConfigTypeValidations</p> <p>PaasConfigValidations is a map which holds all validations, with key being the (lower case) name of the crd and value being a PaasConfigTypeValidations object.</p> <p>Appears in: - PaasConfigSpec</p>"},{"location":"development-guide/00_api/#paasgroup","title":"PaasGroup","text":"<p>PaasGroup can hold information about a group in the paas.spec.groups block</p> <p>Appears in: - PaasGroups</p> Field Description Default Validation <code>query</code> string A fully qualified LDAP query which will be used by the Group Sync Operator to sync users to the defined group.When set in combination with <code>users</code>, the Group Sync Operator will overwrite the manually assigned users.Therefore, this field is mutually exclusive with <code>group.users</code>. Optional: {}  <code>users</code> string array A list of LDAP users which are added to the defined group.When set in combination with <code>users</code>, the Group Sync Operator will overwrite the manually assigned users.Therefore, this field is mutually exclusive with <code>group.query</code>. Optional: {}  <code>roles</code> string array List of roles, as defined in the <code>PaasConfig</code> which the users in this group get assigned via a rolebinding. Optional: {}"},{"location":"development-guide/00_api/#paasgroups","title":"PaasGroups","text":"<p>Underlying type: map[string]PaasGroup</p> <p>PaasGroups hold all groups in a paas.spec.groups</p> <p>Appears in: - PaasSpec</p>"},{"location":"development-guide/00_api/#paaslist","title":"PaasList","text":"<p>PaasList contains a list of Paas</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha1</code> <code>kind</code> string <code>PaasList</code> <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> Paas array"},{"location":"development-guide/00_api/#paasns","title":"PaasNS","text":"<p>PaasNS is the Schema for the PaasNS API</p> <p>Appears in: - PaasNSList</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha1</code> <code>kind</code> string <code>PaasNS</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PaasNSSpec"},{"location":"development-guide/00_api/#paasnslist","title":"PaasNSList","text":"<p>PaasNSList contains a list of PaasNS</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha1</code> <code>kind</code> string <code>PaasNSList</code> <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> PaasNS array"},{"location":"development-guide/00_api/#paasnsspec","title":"PaasNSSpec","text":"<p>PaasNSSpec defines the desired state of PaasNS</p> <p>Appears in: - PaasNS</p> Field Description Default Validation <code>paas</code> string Deprecated: not required once paas controller is managing the PaasNS resources.The <code>metadata.name</code> of the Paas which created the namespace in which this PaasNS is applied MinLength: 1 Required: {}  <code>groups</code> string array Keys of the groups, as defined in the related <code>paas</code>, which should get access tothe namespace created by this PaasNS. When not set, all groups as defined in the related<code>paas</code> get access to the namespace created by this PaasNS. Optional: {}  <code>sshSecrets</code> object (keys:string, values:string) SSHSecrets which should exist in the namespace created through this PaasNS,the values are the encrypted secrets through Crypt Optional: {}"},{"location":"development-guide/00_api/#paasspec","title":"PaasSpec","text":"<p>PaasSpec defines the desired state of Paas</p> <p>Appears in: - Paas</p> Field Description Default Validation <code>capabilities</code> PaasCapabilities Capabilities is a subset of capabilities that will be available in this Paas Project Optional: {}  <code>requestor</code> string Requestor is an informational field which decides on the requestor (also application responsible) MinLength: 1 Required: {}  <code>groups</code> PaasGroups Groups define k8s groups, based on an LDAP query or a list of LDAP users, which get access to the namespacesbelonging to this Paas. Per group, RBAC roles can be defined. Optional: {}  <code>quota</code> Quota Quota defines the quotas which should be set on the cluster resource quota as used by this Paas project Required: {}  <code>namespaces</code> string array Namespaces can be used to define extra namespaces to be created as part of this Paas projectAs the names are used as the names of PaasNs resources, they must comply to the DNS subdomainname regexSee https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#dns-subdomain-names for more info Optional: {}  <code>sshSecrets</code> object (keys:string, values:string) You can add ssh keys (which is a type of secret) for ArgoCD to use for access to bitBucket.They must be encrypted with a public key, for which the private key should be added to the DecryptKeySecret Optional: {}  <code>managedByPaas</code> string Indicated by which 3rd party Paas's ArgoCD this Paas is managed Optional: {}"},{"location":"development-guide/00_api/#cpetbelastingdienstnlv1alpha2","title":"cpet.belastingdienst.nl/v1alpha2","text":"<p>Package v1alpha2 contains API Schema definitions for the  v1alpha2 API group</p>"},{"location":"development-guide/00_api/#resource-types_1","title":"Resource Types","text":"<ul> <li>Paas</li> <li>PaasConfig</li> <li>PaasConfigList</li> <li>PaasList</li> <li>PaasNS</li> <li>PaasNSList</li> </ul>"},{"location":"development-guide/00_api/#configcapperm_1","title":"ConfigCapPerm","text":"<p>Underlying type: object</p> <p>Appears in: - ConfigCapability</p>"},{"location":"development-guide/00_api/#configcapabilities_1","title":"ConfigCapabilities","text":"<p>Underlying type: map[string]ConfigCapability</p> <p>Appears in: - PaasConfigSpec</p>"},{"location":"development-guide/00_api/#configcapability_1","title":"ConfigCapability","text":"<p>Appears in: - ConfigCapabilities</p> Field Description Default Validation <code>applicationset</code> string Name of the ArgoCD ApplicationSet which manages this capability MinLength: 1 Required: {}  <code>quotas</code> ConfigQuotaSettings Quota settings for this capability Required: {}  <code>extra_permissions</code> ConfigCapPerm Extra permissions set for this capability Optional: {}  <code>default_permissions</code> ConfigCapPerm Default permissions set for this capability Optional: {}  <code>custom_fields</code> object (keys:string, values:ConfigCustomField) Settings to allow specific configuration specific to a capability"},{"location":"development-guide/00_api/#configcustomfield_1","title":"ConfigCustomField","text":"<p>Appears in: - ConfigCapability</p> Field Description Default Validation <code>validation</code> string Regular expression for validating input, defaults to '', which means no validation. Optional: {}  <code>default</code> string Set a default when no value is specified, defaults to ''.Only applies when Required is false. Optional: {}  <code>template</code> string You can now use a go-template string to use Paas and PaasConfig variables and compile a value Optional: {}  <code>required</code> boolean Define if the value must be specified in the PaaS.When set to true, and no value is set, PaasNs has error in status field, and capability is not built.When set to false, and no value is set, Default is used. Optional: {}"},{"location":"development-guide/00_api/#configfeatureflags","title":"ConfigFeatureFlags","text":"<p>Appears in: - PaasConfigSpec</p> Field Description Default Validation <code>group_user_management</code> string Should the operator manage group users allow Enum: [allow warn block] Optional: {}"},{"location":"development-guide/00_api/#configquotasettings_1","title":"ConfigQuotaSettings","text":"<p>Appears in: - ConfigCapability</p> Field Description Default Validation <code>clusterwide</code> boolean Is this a clusterwide quota or not false Optional: {}  <code>ratio</code> float The ratio of the requested quota which will be applied to the total quota Format: float Maximum: 1 Minimum: 0 Optional: {}  <code>defaults</code> object (keys:ResourceName, values:Quantity) The default quota which the enabled capability gets Required: {}  <code>min</code> object (keys:ResourceName, values:Quantity) The minimum quota which the enabled capability gets Optional: {}  <code>max</code> object (keys:ResourceName, values:Quantity) The maximum quota which the capability gets Optional: {}"},{"location":"development-guide/00_api/#configrolemappings_1","title":"ConfigRoleMappings","text":"<p>Underlying type: object</p> <p>Appears in: - PaasConfigSpec</p>"},{"location":"development-guide/00_api/#configtemplatingitem","title":"ConfigTemplatingItem","text":"<p>Underlying type: object</p> <p>go templating can be used to derive the labels to be set on the resource when created</p> <p>Appears in: - ConfigTemplatingItems</p>"},{"location":"development-guide/00_api/#configtemplatingitems","title":"ConfigTemplatingItems","text":"<p>For each resource type go templating can be used to derive the labels to be set on the resource when created</p> <p>Appears in: - PaasConfigSpec</p> Field Description Default Validation <code>genericCapabilityFields</code> ConfigTemplatingItem Templates to add fields to all capabilities Optional: {}  <code>clusterQuotaLabels</code> ConfigTemplatingItem Templates to add labels to cluster quota labels Optional: {}  <code>groupLabels</code> ConfigTemplatingItem Templates to add labels to group labels Optional: {}  <code>namespaceLabels</code> ConfigTemplatingItem Templates to add labels to namespace labels Optional: {}  <code>roleBindingLabels</code> ConfigTemplatingItem Templates to describe labels for rolebindings Optional: {}"},{"location":"development-guide/00_api/#namespacedname_1","title":"NamespacedName","text":"<p>NamespacedName is an internal type that can be used by the PaasConfig sub resources to define namespaced resources.</p> <p>Appears in: - PaasConfigSpec</p> Field Description Default Validation <code>name</code> string MinLength: 1 Required: {}  <code>namespace</code> string MinLength: 1 Required: {}"},{"location":"development-guide/00_api/#paas_1","title":"Paas","text":"<p>Paas is the Schema for the paas API</p> <p>Appears in: - PaasList</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha2</code> <code>kind</code> string <code>Paas</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PaasSpec"},{"location":"development-guide/00_api/#paascapabilities_1","title":"PaasCapabilities","text":"<p>Underlying type: map[string]PaasCapability</p> <p>PaasCapabilities holds all capabilities enabled in a Paas</p> <p>Appears in: - PaasSpec</p>"},{"location":"development-guide/00_api/#paascapability_1","title":"PaasCapability","text":"<p>PaasCapability holds all information for a capability</p> <p>Appears in: - PaasCapabilities</p> Field Description Default Validation <code>custom_fields</code> object (keys:string, values:string) Custom fields to configure this specific Capability Optional: {}  <code>quota</code> Quota This project has its own ClusterResourceQuota settings Optional: {}  <code>secrets</code> object (keys:string, values:string) Secrets must be encrypted with a public key, for which the private key should be added to the DecryptKeySecret Optional: {}  <code>extra_permissions</code> boolean You can enable extra permissions for the service accounts belonging to this capabilityExact definitions is configured in Paas Configmap Optional: {}"},{"location":"development-guide/00_api/#paasconfig_1","title":"PaasConfig","text":"<p>Appears in: - PaasConfigList</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha2</code> <code>kind</code> string <code>PaasConfig</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PaasConfigSpec"},{"location":"development-guide/00_api/#paasconfiglist_1","title":"PaasConfigList","text":"<p>PaasConfigList contains a list of PaasConfig</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha2</code> <code>kind</code> string <code>PaasConfigList</code> <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> PaasConfig array"},{"location":"development-guide/00_api/#paasconfigspec_1","title":"PaasConfigSpec","text":"<p>Appears in: - PaasConfig</p> Field Description Default Validation <code>decryptKeySecret</code> NamespacedName DecryptKeysSecret is a reference to the secret containing the DecryptKeys Required: {}  <code>debug</code> boolean Enable debug information generation or not false Optional: {}  <code>capabilities</code> ConfigCapabilities A map with zero or more ConfigCapability Optional: {}  <code>clusterwide_argocd_namespace</code> string Namespace in which a clusterwide ArgoCD can be found for managing capabilities and appProjectsDeprecated: ArgoCD specific code will be removed from the operator MinLength: 1 Required: {}  <code>quota_label</code> string Label which is added to clusterquotas clusterquotagroup Optional: {}  <code>requestor_label</code> string Deprecated: RequestorLabel is replaced by go template functionalityName of the label used to define who is the contact for this resource requestor Optional: {}  <code>managed_by_label</code> string Deprecated: ManagedByLabel is replaced by go template functionalityName of the label used to define by whom the resource is managed. argocd.argoproj.io/managed-by Optional: {}  <code>managed_by_suffix</code> string Deprecated: ManagedBySuffix is replaced by go template functionalityonce availableSuffix to be appended to the managed-by-label argocd Optional: {}  <code>rolemappings</code> ConfigRoleMappings Grant permissions to all groups according to config in configmap and role selected per group in paas. Optional: {}  <code>feature_flags</code> ConfigFeatureFlags Enable, disable, and tune operator features Optional: {}  <code>validations</code> PaasConfigValidations Set regular expressions to have the webhooks validate the fields Optional: {}  <code>templating</code> ConfigTemplatingItems With templating Administrators can define labels and generic custom fields to be applied on sub resources Optional: {}"},{"location":"development-guide/00_api/#paasconfigtypevalidations_1","title":"PaasConfigTypeValidations","text":"<p>Underlying type: object</p> <p>PaasConfigTypeValidations can have custom validations for a specific CRD (e.a. paas, paasConfig or PaasNs). Refer to https://belastingdienst.github.io/opr-paas/latest/administrators-guide/validations/ for more info.</p> <p>Appears in: - PaasConfigValidations</p>"},{"location":"development-guide/00_api/#paasconfigvalidations_1","title":"PaasConfigValidations","text":"<p>Underlying type: map[string]PaasConfigTypeValidations</p> <p>PaasConfigValidations is a map which holds all validations, with key being the (lower case) name of the crd and value being a PaasConfigTypeValidations object.</p> <p>Appears in: - PaasConfigSpec</p>"},{"location":"development-guide/00_api/#paasgroup_1","title":"PaasGroup","text":"<p>PaasGroup can hold information about a group in the paas.spec.groups block</p> <p>Appears in: - PaasGroups</p> Field Description Default Validation <code>query</code> string A fully qualified LDAP query which will be used by the Group Sync Operator to sync users to the defined group.When set in combination with <code>users</code>, the Group Sync Operator will overwrite the manually assigned users.Therefore, this field is mutually exclusive with <code>group.users</code>. Optional: {}  <code>users</code> string array A list of LDAP users which are added to the defined group.When set in combination with <code>users</code>, the Group Sync Operator will overwrite the manually assigned users.Therefore, this field is mutually exclusive with <code>group.query</code>. Optional: {}  <code>roles</code> string array List of roles, as defined in the <code>PaasConfig</code> which the users in this group get assigned via a rolebinding. Optional: {}"},{"location":"development-guide/00_api/#paasgroups_1","title":"PaasGroups","text":"<p>Underlying type: map[string]PaasGroup</p> <p>PaasGroups hold all groups in a paas.spec.groups</p> <p>Appears in: - PaasSpec</p>"},{"location":"development-guide/00_api/#paaslist_1","title":"PaasList","text":"<p>PaasList contains a list of Paas</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha2</code> <code>kind</code> string <code>PaasList</code> <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> Paas array"},{"location":"development-guide/00_api/#paasns_1","title":"PaasNS","text":"<p>PaasNS is the Schema for the PaasNS API</p> <p>Appears in: - PaasNSList</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha2</code> <code>kind</code> string <code>PaasNS</code> <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PaasNSSpec"},{"location":"development-guide/00_api/#paasnslist_1","title":"PaasNSList","text":"<p>PaasNSList contains a list of PaasNS</p> Field Description Default Validation <code>apiVersion</code> string <code>cpet.belastingdienst.nl/v1alpha2</code> <code>kind</code> string <code>PaasNSList</code> <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> PaasNS array"},{"location":"development-guide/00_api/#paasnsspec_1","title":"PaasNSSpec","text":"<p>PaasNSSpec defines the desired state of PaasNS</p> <p>Appears in: - PaasNS</p> Field Description Default Validation <code>paas</code> string Deprecated: this has no function anymore and will be deleted in the next version. MinLength: 1 Optional: {}  <code>groups</code> string array Keys of the groups, as defined in the related <code>paas</code>, which should get access tothe namespace created by this PaasNS. When not set, all groups as defined in the related<code>paas</code> get access to the namespace created by this PaasNS. Optional: {}  <code>secrets</code> object (keys:string, values:string) Secrets which should exist in the namespace created through this PaasNS,the values are the encrypted secrets through Crypt Optional: {}"},{"location":"development-guide/00_api/#paasnamespace","title":"PaasNamespace","text":"<p>PaasNamespace holds all info regarding a Paas managed Namespace (groups and secrets)</p> <p>Appears in: - PaasNamespaces</p> Field Description Default Validation <code>groups</code> string array Keys of groups which should get access to this namespace. When not set it defaults to all groups listed in<code>spec.groups</code>. Optional: {}  <code>secrets</code> object (keys:string, values:string) Secrets which should exist in this namespace, the values must be encrypted with a key pair referenced by<code>spec.decryptKeySecret</code> from the active PaasConfig. Optional: {}"},{"location":"development-guide/00_api/#paasnamespaces","title":"PaasNamespaces","text":"<p>Underlying type: map[string]PaasNamespace</p> <p>PaasNamespaces is a key, value store of all defined Namespaces</p> <p>Appears in: - PaasSpec</p>"},{"location":"development-guide/00_api/#paasspec_1","title":"PaasSpec","text":"<p>PaasSpec defines the desired state of Paas</p> <p>Appears in: - Paas</p> Field Description Default Validation <code>requestor</code> string Deprecated, the requestor implementation will be replaced by an annotation and Go Template functionalityand will be removed in v1alpha3Requestor is an informational field which decides on the requestor (also application responsible) Optional: {}  <code>quota</code> Quota Quota defines the quotas which should be set on the cluster resource quota as used by this Paas project Required: {}  <code>capabilities</code> PaasCapabilities Capabilities is a subset of capabilities that will be available in this Paas Project Optional: {}  <code>groups</code> PaasGroups Groups define k8s groups, based on an LDAP query or a list of LDAP users, which get access to the namespacesbelonging to this Paas. Per group, RBAC roles can be defined. Optional: {}  <code>namespaces</code> PaasNamespaces Namespaces can be used to define extra namespaces to be created as part of this Paas project Optional: {}  <code>secrets</code> object (keys:string, values:string) Secrets must be encrypted with a public key, for which the private key should be added to the DecryptKeySecret Optional: {}  <code>managedByPaas</code> string Deprecated, the managedByPaas implementation will be replaced by an annotation and go template functionalityIndicated by which 3rd party Paas this Paas is managed Optional: {}"},{"location":"development-guide/20_issues/","title":"Raising Issues","text":"<p>When raising issues, please specify the following:</p> <ul> <li>Setup details as specified in the issue template</li> <li>A scenario where the issue occurred (with details on how to reproduce it)</li> <li>Errors and log messages that are displayed by the involved software</li> <li>Any other detail that might be useful</li> </ul> <p>For security related issues, we have a dedicated security policy.</p>"},{"location":"development-guide/21_security-issues/","title":"Security Policy","text":"<p>The Dutch Tax Office (Dutch: Belastingdienst) takes the security of our products and services seriously.</p> <p>If you believe you have found a security vulnerability, please report it before sharing it with the outside world. This way, we can take measures first. This is called 'Coordinated Vulnerability Disclosure' (CVD).</p>"},{"location":"development-guide/21_security-issues/#reporting-security-issues","title":"Reporting Security Issues","text":"<p>Please do not report security vulnerabilities through public GitHub issues.</p> <p>The Coordinated Vulnerability Disclosure page on our webpage explains how to securely report your finding.</p> <p>In summary:</p> <ul> <li>Send us your findings by e-mail: cvd@belastingdienst.nl</li> <li>If possible, encrypt your findings with our PGP-key on the Coordinated Vulnerability Disclosure page.</li> <li>provide sufficient information to be able to reproduce the problem, so that we   can rectify this as quickly as possible. The URL of the system affected and a   description of the vulnerability are sufficient, but more information may be   required for more complex vulnerabilities.</li> <li>leave your contact details so that our Security Operations Centre can contact   you in order to jointly find a safe solution. Leave at least an e-mail address   or telephone number.</li> <li>do not share the information regarding the security problem with other people   until we have solved it.</li> <li>handle the information regarding the security problem responsibly by not performing   any actions that go further than necessary to demonstrate the security problem.</li> <li>realize that any information in our systems falls under the (fiscal) duty of   confidentiality and that further dissemination of the said information is a   punishable offense.</li> </ul>"},{"location":"development-guide/21_security-issues/#policy","title":"Policy","text":"<ul> <li>The Dutch Tax Office (Dutch: Belastingdienst) follows the principle of Coordinated Vulnerability Disclosure.</li> </ul>"},{"location":"development-guide/25_support-policy/","title":"Support Policy","text":"<p>By enforcing this support and versioning strategy, we can focus on delivering timely, reliable updates and maintaining a streamlined release process for all users.</p> <p>We follow a roll-forward-only support model. This ensures that all users benefit from the latest improvements, fixes, and security updates without fragmenting support across outdated versions.</p>"},{"location":"development-guide/25_support-policy/#supported-versions","title":"Supported Versions","text":"<ul> <li>We only support the latest active major release series.</li> <li>Fixes, improvements, and security updates will only be applied to the most recent   release.</li> <li>Previous major release series are considered end-of-life (EOL) and will not   receive backported fixes or patches.</li> <li>Users are expected to upgrade to the latest available version to remain supported.</li> </ul>"},{"location":"development-guide/25_support-policy/#no-backports","title":"No Backports","text":"<ul> <li>We do not backport fixes to older versions.</li> <li>If an issue is identified in an older release, the resolution will be provided   in a new release based on the current active version.</li> <li>Hotfixes and patches are provided only within the current supported release series.</li> </ul>"},{"location":"development-guide/25_support-policy/#hotfixes","title":"Hotfixes","text":"<ul> <li>Hotfixes are supported exclusively for the currently supported release series.</li> <li>Hotfixes are created from the latest release tag.</li> <li>All hotfix branches must be merged back into <code>main</code> after release to ensure continuity.</li> </ul>"},{"location":"development-guide/25_support-policy/#versioning","title":"Versioning","text":"<p>We adhere to Semantic Versioning v2.0.0 with the following conventions: - All version numbers are prefixed with the letter 'v' (e.g., <code>v2.1.0</code>). - vX.Y.Z structure:   - X: Major version \u2013 may introduce breaking changes.   - Y: Minor version \u2013 adds functionality in a backward-compatible manner.   - Z: Patch version \u2013 backward-compatible fixes.</p> <p>Note: Only the latest major version is supported. Minor and patch releases   within the current major version are eligible for updates.</p>"},{"location":"development-guide/25_support-policy/#commits","title":"Commits","text":"<p>We strictly follow the Conventional Commits v1.0.0 specification. This ensures that commit messages are: - Clear and machine-readable. - Aligned with semantic versioning for automated changelog generation and release drafting.</p>"},{"location":"development-guide/30_submitting-a-pr/","title":"Submitting a Pull Request","text":"<p>First and foremost: as a potential contributor, your changes and ideas are welcome at any hour of the day or night, weekdays, weekends, and holidays. Please do not ever hesitate to ask a question or send a PR.</p> <p>Tip</p> <p>Before you submit a pull request, please read this document from the Istio documentation which contains very good insights and best practices: \"Writing Good Pull Requests\".</p> <p>If you have written code for an improvement to Paas or a bug fix, please follow this procedure to submit a pull request:</p> <ol> <li>Create a fork of the Paas Operator project;</li> <li>Add a comment to the related issue to let us know you're working on it;</li> <li>Develop your feature or fix on your forked repository;</li> <li>Run the e2e tests in your forked repository, see our related e2e testing    documentation;</li> <li>Once development is finished, create a pull request from your forked project    to the Paas project.    Please make sure the pull request title and message follow Conventional Commits</li> </ol> <p>One of the maintainers will then proceed with the first review and approve the CI workflow to run in the Paas project.  The second reviewer will run end-to-end test against the changes in fork pull request. If testing passes, the pull request will be labeled with <code>ok-to-merge</code> and will be ready for merge.</p>"},{"location":"development-guide/30_submitting-a-pr/#sign-your-work","title":"Sign your work","text":"<p>We use the Developer Certificate of Origin (DCO) as an additional safeguard for the Paas project. This is a well established and widely used mechanism to assure contributors have confirmed their right to license their contribution under the project's license.</p> <p>Please read https://developercertificate.org.</p> <p>If you can certify it, then just add a line to every git commit message:</p> <p>Example</p> <pre><code>  Signed-off-by: Random J Developer &lt;random@developer.example.org&gt;\n</code></pre> <p>or use the command <code>git commit -s -m \"commit message comes here\"</code> to sign-off on your commits.</p> <p>Use your real name (sorry, no pseudonyms or anonymous contributions). If you set your <code>user.name</code> and <code>user.email</code> git configs, you can sign your commit automatically with <code>git commit -s</code>.</p> <p>You can also use git aliases like <code>git config --global alias.ci 'commit -s'</code>. Now you can commit with <code>git ci</code> and the commit will be signed.</p>"},{"location":"development-guide/31_writing-good-pull-request/","title":"Writing Good Pull Requests","text":"<p>Note</p> <p>The following text was shamelessly copied in full from the Istio project. The original lives at: https://github.com/istio/istio/wiki/Writing-Good-Pull-Requests</p> <p>The reason for including the text here, is that we really liked the content and did not want to run the risk of having a broken link / losing the content in the future should the original ever be moved or deleted.</p> <p>One of the biggest bottlenecks we have in Istio is PR reviews. By creating good PRs, you can help the reviewers go through your PR easily and get it checked-in quickly. This is a set of guidelines for creating good pull requests.</p> <ul> <li>Communicate beforehand<ul> <li>Open a tracking issue</li> <li>Use work-in-progress PRs for early feedback</li> </ul> </li> <li>Add a good explanation</li> <li>Keep it short</li> <li>Organize into commits</li> <li>Add tests!</li> <li>Tracking future work</li> </ul>"},{"location":"development-guide/31_writing-good-pull-request/#communicate-beforehand-ie-why-are-you-doing-this","title":"Communicate beforehand (i.e. why are you doing this?)","text":"<p>It's awful when a reviewer rejects your PR, or objects to your design. You now have to throw away your carefully crafted and authored PR and start over.</p> <p>If you communicate your intent for the change to the reviewer beforehand and agree on the design, there is much less of a chance of outright rejection of PRs, or substantial change requests. It also gives an opportunity for the reviewer to think about the problem and think about how the system behavior would change, before they start reviewing the code.</p>"},{"location":"development-guide/31_writing-good-pull-request/#open-a-tracking-issue","title":"Open a tracking issue","text":"<p>Unless the PR is trivial, it is a good idea to open a bug to track the issue first. Especially if this is for fixing a bug. This allows capturing more detailed analysis (and repro steps if this is a bug) separately. It can also be used to track multiple PRs against the same problem.</p>"},{"location":"development-guide/31_writing-good-pull-request/#use-work-in-progress-prs-for-early-feedback","title":"Use work-in-progress PRs for early feedback","text":"<p>A good way to communicate before investing too much time is to create a \"Work-in-progress\" PR and share it with your reviewers. The standard way of doing this is to add a \"WIP:\" prefix in your PR's title. This will let people looking at your PR know that it is not well baked yet. Our infrastructure also understands that the PR is not ready for merging yet, and will not allow accidental merging.</p>"},{"location":"development-guide/31_writing-good-pull-request/#add-a-good-explanation-ie-what-exactly-are-you-doing","title":"Add a good explanation (i.e. what exactly are you doing?)","text":"<p>If you just write a cryptic title and nothing else, there is not much to go with for the reviewer. The reviewer will need to reconstruct what you're trying to accomplish from your code, which is not an easy task.</p> <p>Writing a good, short, to the point explanation of what is going in your commits is extremely useful for the reviewer. If there are multiple things going on (i.e. a needed refactoring, a trivial bug fix you happened to catch along the way, an issue that you found for which you're adding a TODO for), add these as bullet-points in your PR description.</p> <p>This not only helps the reviewer, but also people that are looking at the repo history, trying to figure out what has changed in a particular pull request.</p> <p>Do:</p> <pre><code>Subject: Fix bug(#449) that causes Foo component to crash when flag is not set.\nDescription:\n+ This is caused by an off-by-one failure during iteration of nukes to launch.\n+ Also fixed a race condition by adding a lock on the trigger mechanism that caused concurrent launches that caused a crash in the silo.\n+ Adding a TODO for refactoring the code as well, as the cold war is over and we don't need this particular\ndefense mechanism anymore.\n</code></pre> <p>Don't</p> <pre><code>Subject: Fix minor bug.\nDescription:\n</code></pre>"},{"location":"development-guide/31_writing-good-pull-request/#keep-it-short","title":"Keep it short","text":"<p>The shorter the PR, the easier to review. Reviewing a PR requires the reviewer to understand how the system behavior is being changed. With bigger PRs, this becomes harder to understand, especially with the diff based nature of the review tools.</p> <p>Keep your PRs as short as possible. A good rule of thumb is that if you PR ends up touching more than 500 lines, you should consider breaking it up into smaller PRs.</p> <p>If there are refactorings that you've decided to do along the way, move them to a separate PR so that real changes aren't mingled with no-brainer refactoring changes.</p>"},{"location":"development-guide/31_writing-good-pull-request/#organize-into-commits","title":"Organize into commits","text":"<p>If you must merge large changes, all in one go, then consider splitting your changes into multiple commits within the same pull request. This allows the reviewer to compartmentalize your changes and review them in isolation.</p> <p>When making changes that are requested by your reviewers, add them as additional commits, instead of squashing it into the original. This allows the reviewer to quickly spot that his feedback is being incorporated.</p>"},{"location":"development-guide/31_writing-good-pull-request/#add-tests-ie-does-it-actually-work","title":"Add tests! (i.e. does it actually work?)","text":"<p>Whatever the issue you're fixing, add tests! Adding tests are the best way to convince the reviewer that what you're doing actually works. It also makes sure that the product will not regress and the issue will not occur again.</p> <p>It is crucial to add the right type of tests. If the issue you are fixing is due to a particular library (e.g. cache library race condition causing cache poisoning), it is perfectly reasonable to write a small unit-test to avoid the regression.</p> <p>However, if the issue is larger scoped (e.g. change in product behavior), then it is important to add the right integration or end-to-end test to verify the behavior.</p>"},{"location":"development-guide/31_writing-good-pull-request/#tracking-future-work","title":"Tracking future work","text":"<p>Sometimes in the course of a PR review, a reviewer will point out more work that should be done as part of the change. When this happens, it is common for the author of the PR to say \"Good idea, I'll do that in a follow-up PR\". As part of this, it's generally desirable for the author to open a new issue (assuming there isn't one already) to track this extra work. The issue # should be included in the original PR so that the reviewer can rest assured that the work will not be forgotten.</p>"},{"location":"development-guide/40_e2e-tests/","title":"Introduction","text":"<p>We have a bunch of end-to-end tests that can be used by you to verify whether the operator still works as expected after you made any code changes. These tests are also part of our continues integration pipeline on GitHub.</p>"},{"location":"development-guide/40_e2e-tests/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have a vanilla Kubernetes or OpenShift cluster running. We can heartily recommend using kind.</p> <p>Example</p> <p><code>kind create cluster</code> </p>"},{"location":"development-guide/40_e2e-tests/#running-the-tests","title":"Running the tests","text":"<ol> <li>In case of a vanilla kubernetes cluster, run: <code>make setup-e2e</code>    This will apply mocks, etc. needed to run the operator.</li> <li>Start the operator: <code>make run</code></li> <li>Finally, run the actual e2e tests: <code>make test-e2e</code></li> </ol>"},{"location":"development-guide/40_e2e-tests/#design-considerations","title":"Design considerations","text":"<p>We've decided to use the e2e-framework from K8S. The advantages of this framework are that any connection to a K8S cluster can be used to execute these tests against that cluster.</p> <p>This makes the tests loosely coupled, and thus usable against various types of clusters. For example a K3S cluster spun up on a developer's machine or in one in GitHub actions.</p> <p>We can use our favorite programming language to write the tests. The framework uses a kubernetes client to execute K8S commands to the connected cluster. The cluster should have a Paas operator installed to reconcile Paas'es during the execution of these tests. The tests assert whether the expected resources are created on the cluster.</p>"},{"location":"development-guide/40_e2e-tests/#setup","title":"Setup","text":"<p>The host running these tests, must have an active connection to a K8S cluster in it's kubeConfig. It must be logged in and have the appropriate permissions to apply the resources used in this test.</p> <p>The tests, by default, run in a namespace: <code>paas-e2e</code> which will be created during test setup (<code>main_test.go</code>) and deleted afterward. If you would like to use an existing namespace, set the environment variable: <code>PAAS_E2E_NS</code> to the namespace name.</p> <p>Info</p> <p>The tests do not create the custom namespace for you in case it happens to be missing, so make sure to create it or be prepared to enjoy the error message.</p>"},{"location":"development-guide/50_notes/","title":"Developer notes","text":"<ul> <li>Because of dependency issues we decided to use a stub instead of importing all   dependencies behind the original code of ArgoCD.</li> </ul> <p>More info in <code>internal/stubs/argoproj/v1alpha1</code></p>"},{"location":"development-guide/60_writing-documentation/","title":"Writing Documentation","text":"<p>Our project utilizes a structured approach to documentation to ensure clarity and ease of access for all users. All documentation is written in Markdown and stored within the <code>docs</code> directory of the repository. The first level of directories under <code>docs</code> corresponds to the main sections of our documentation site:</p> <ul> <li><code>overview</code></li> <li><code>administrators-guide</code></li> <li><code>user-guide</code></li> <li><code>development-guide</code></li> <li><code>about</code></li> </ul> <p>We use MkDocs along with the Material for MkDocs theme to generate a professional and user-friendly documentation site from this structure.</p>"},{"location":"development-guide/60_writing-documentation/#partially-generated-documentation","title":"Partially generated documentation","text":"<p>While most of the documentation is handwritten by the core team or contributors, the API documentation in the development guide section is auto-generated using the <code>crd-ref-docs</code> tool from Elastic.</p> <p>This document is auto-generated by a GitHub Actions workflow so you should never need to do so manually.</p> <p>If for some reason you do need to, here is how.</p> <p>Assuming you're located in the root of the repository, execute the following to update the API document.</p> <pre><code>go install github.com/elastic/crd-ref-docs\ncrd-ref-docs --config=./crd-ref-docs-config.yml --source-path=./api --renderer=markdown --output-path=./docs/development-guide/00_api.md\n</code></pre>"},{"location":"development-guide/60_writing-documentation/#writing-clear-and-effective-documentation","title":"Writing Clear and Effective Documentation","text":"<p>When contributing to the documentation, please aim to keep your writing simple and factual. Clear and concise documentation helps users understand and utilize our project more effectively.</p>"},{"location":"development-guide/60_writing-documentation/#tips-for-writing-good-documentation","title":"Tips for Writing Good Documentation","text":"<p>Be Concise and Direct: Use straightforward language and get to the point quickly. Avoid unnecessary words or overly complex sentences.</p> <p>Use Active Voice: Write in active voice to make your writing more engaging and easier to understand. For example, we would prefer the use of \"Install the package using...\" over \"The package can be installed using...\".</p> <p>Organize Content Logically: Break down information into logical sections and use headings and subheadings to guide the reader. This makes it easier for users to find the information they need.</p> <p>Ensure that you place your documentation in the right subsection for your intended reader.</p> <p>Use Lists and Bullet Points: When presenting multiple items or steps, use lists to improve readability.</p> <p>Include Examples and Call-Outs: Provide code snippets or command-line examples where applicable to illustrate your points.</p> <p>Tip</p> <p>Use call-outs like this to highlight important information. You can use \"note\", \"abstract\", \"info\", \"tip\", \"success\", \"question\", \"warning\", \"failure\", \"danger\", \"bug\", \"example\" and \"quote\".</p> <p>See the docs for more information.</p> <p>Maintain Consistent Formatting: Try to follow the existing style and formatting conventions used in the rest of the documentation. This includes heading styles, code block formatting, and emphasis.</p> <p>Proofread Your Work: Check for spelling and grammar errors before submitting. Reading your text aloud can help identify awkward phrasing or mistakes.</p> <p>By following these guidelines, you'll help maintain a high standard of quality in our documentation, making it a valuable resource for everyone involved in the project.</p>"},{"location":"development-guide/e2e-test-details/","title":"E2E test cases for opr-paas","text":"<p>Below you will find a list of features that we want to test using end-to-end testing. For each feature, the setup and the assessments are listed.</p>"},{"location":"development-guide/e2e-test-details/#paas","title":"Paas","text":"<p>What we test: CRUD for Paas</p> <p>Scenarios:</p> <ol> <li> <p>A <code>Paas</code> is created that already exists. Given that a specified <code>Paas</code> already exists, when someone configures a new <code>Paas</code> with the same name, then the <code>Paas</code> related namespace must not be created and the operator must return an error.</p> </li> <li> <p>A minimal <code>Paas</code> is created. Given that the <code>Paas</code> does not exist, when someone configures the minimal <code>Paas</code> then the <code>Paas</code> namespace must be created and the status of the <code>Paas</code> contains no errors.</p> </li> <li> <p>A <code>Paas</code> is renamed. Given that a specified <code>Paas</code> exists, when the <code>Paas</code> is renamed in the configuration, then the related <code>Paas</code> namespace must be renamed as well.</p> </li> <li> <p>A <code>Paas</code> is deleted. Given that a specified <code>Paas</code> exists, when the <code>Paas</code> is deleted, then the namespace belonging to the <code>Paas</code> is also removed.</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#paasns","title":"PaasNs","text":"<p>What we test: CRUD for PaasNs</p> <p>Scenarios:</p> <ol> <li> <p>A <code>PaasNs</code> is created for a <code>Paas</code> that does not exist. Given that a specified <code>Paas</code> does not exist, when someone configures a <code>PaasNs</code> to be created under specified <code>Paas</code>, then the <code>PaasNs</code> related namespace must not be created and the status of said <code>PaasNs</code> must contain the correct error.</p> </li> <li> <p>A minimal <code>Paas</code> that is referenced in the <code>PaasNs</code> is created. Given that the <code>PaasNs</code> does not exist, and that the minimal <code>Paas</code> does not exist, when someone configures the minimal <code>Paas</code> and someone configures the <code>PaasNs</code> referencing the minimal <code>Paas</code> then the <code>PaasNS</code> namespace must be created and the <code>PaasNS</code> namespace has the <code>quota_label</code> label with the value of ... FIXME and the status of the <code>PaasNs</code> contains no errors.</p> </li> <li> <p>A <code>PaasNs</code> is renamed. Given that a specified <code>PaasNs</code> exists, when the <code>PaasNs</code> is renamed in the configuration, then the related <code>PaasNs</code> namespace must be renamed as well.</p> </li> <li> <p>A <code>PaasNs</code> is deleted. Given that a specified <code>PaasNs</code> exists, when the <code>PaasNs</code> is deleted, then the namespace belonging to the <code>PaasNs</code> is also removed.</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#namespaces","title":"Namespaces","text":"<ol> <li> <p>A minimal <code>Paas</code> configuration without namespaces results in one namespace. Given a minimal <code>Paas</code> configuration without namespaces, when someone adds said configuration to the system, then a single namespace should have been created, and this namespace should be named the same as the <code>Paas</code>, and no <code>PaasNs</code>'s or there namespaces are linked to th <code>Paas</code>.</p> </li> <li> <p>Adding two namespaces to the <code>Paas</code>'s spec. Given a minimal <code>Paas</code> without any namespaces exists, when the <code>Paas</code> is updated by adding 2 namespaces to the spec, then one namespace with the same name as the <code>Paas</code> must exist, and two <code>PaasNs</code>'s must exist in the namespace of the <code>Paas</code>, and these <code>PaasNs</code>'s each have a namespace, and these <code>PaasNs</code> namespaces must be named according to their <code>spec.namespaces</code> entries, prefixed by the <code>Paas</code> namespace name</p> </li> <li> <p>Removing the namespaces from a <code>Paas</code>. Given a minimal <code>Paas</code> with two namespaces exists, when the <code>Paas</code> configuration is updated to remove the namespaces, then the <code>PaasNs</code>'s should have be removed from the <code>Paas</code> namespace, and the <code>Paas</code> namespace was removed.</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#clusterresourcequotas","title":"ClusterResourceQuotas","text":"<p>What we test: CRQ CRUD</p> <p>Note</p> <p>The <code>spec.quota</code> does not fall under not cluster wide quotas, hence a separate set of test scenarios.</p> <ol> <li> <p>Ensure the correct CRQ is created for a <code>Paas</code>. Given a minimal <code>Paas</code> exists, when someone adds a quota to <code>spec.quota</code> for the <code>Paas</code> configuration, then a CRQ with the name of the <code>Paas</code> must be created, and <code>clusterquotagroup=</code> followed by the <code>Paas</code> name should have been applied    as label selector on the CRQ, and the size of the created CRQ equals the size as specified in the <code>spec.quota</code>.</p> </li> <li> <p>The <code>spec.quota</code> for a <code>Paas</code> is updated. Given a minimal <code>Paas</code> exists, and a valid CRQ exists for this <code>Paas</code>, when someone updates the <code>spec.quota</code> section for the specified <code>Paas</code> configuration, then the CRQ should be updated, and the size of the updated CRQ equals the size as specified in the <code>spec.quota</code>.</p> </li> <li> <p>Removing the <code>Paas</code> should remove the associated CRQ. Given a minimal <code>Paas</code> and its associated CRQ exist, when the <code>Paas</code> is removed, then the associated CRW with the name of the <code>Paas</code> should have removed as well.</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#cluster-wide-quotas","title":"Cluster wide quotas","text":"<p>What we test: cluster wide quota CRUD</p> <p>Scenarios:</p> <p>TODO</p> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#groups-users","title":"Groups =&gt; Users","text":"<p>What we test: managing users and group memberships through <code>Paas</code> configuration.</p> <p>Scenarios:</p> <ol> <li> <p>Creating a group with a single user without a specified role. Given a minimal <code>Paas</code> with a single namespace, and a group with a single user without a specified role, when that <code>Paas</code> is created, then a <code>Group</code> was created with the correct name, and the user is a member of said group, and the correct labels were placed on the group, and the Owner Reference for the Group points to the correct Paas, and the rolebinding on the namespace points to the group to the default role,</p> </li> <li> <p>Updating the <code>Paas</code>, adding a group with a role other than default. Given an existing, minimal <code>Paas</code> with a single namespace, when a group is added to said <code>Paas</code>, and said group has a specific role, other than default (see test_config), and a different user is a member of said group than in scenario 1, then a <code>Group</code> was created with the correct name, and the user is a member of said group, and the correct labels were placed on the group, and the Owner Reference for the Group points to the correct Paas, and the rolebinding on the namespace points to the group to the default role,</p> </li> <li> <p>Removing the <code>Paas</code>. Given an existing <code>Paas</code> with a single group, when said <code>Paas</code> is removed,</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#groups-query","title":"Groups =&gt; Query","text":"<p>What we test: managing users and group memberships through an LDAP query specified in the <code>Paas</code> configuration.</p> <p>Scenarios:</p> <ol> <li>Minimal <code>Paas</code> with one namespace and a <code>Group</code> with a <code>Query</code> but no <code>Role</code>. Given no existing <code>Paas</code>, when a minimal <code>Paas</code> is created with a single namespace, and a <code>Group</code> with a <code>Query</code>, but without a <code>Role</code>, then the <code>Group</code> should not have been created, and there should be no users in said <code>Group</code>, and the correct labels were added onto the <code>Group</code>, and the rolebinding on the namespace points to the group, to the specified role,</li> <li> <p>Updating the <code>Paas</code>, adding a group with a role other than default. Given an existing, minimal <code>Paas</code> with a single namespace, when another query is added to said <code>Paas</code> (compared to step scenario 1), and said group has a specific role, other than default (see test_config), then the <code>Group</code> should not have been created, and there are no users in said group, and the correct labels were placed on the group, (no ldap things) and the rolebinding on the namespace points to the group to the specified role,</p> </li> <li> <p>Removing the <code>Paas</code>. Given an existing <code>Paas</code> with a single group, when said <code>Paas</code> is removed,</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#secrets","title":"Secrets","text":"<p>The capabilities are also used to test clusterwide quotas</p>"},{"location":"development-guide/e2e-test-details/#capability-argocd","title":"Capability ArgoCD","text":"<p>What we test: creating a <code>Paas</code> with a capability named: <code>argocd</code> enabled.</p> <p>Scenarios:</p> <ol> <li> <p>A minimal <code>Paas</code> with a capability named: <code>argocd</code> enabled. Given a minimal <code>Paas</code> and <code>argocd</code> capability configuration, when the minimal <code>Paas</code> is created with the <code>argocd</code> capability enabled, then the list entry in the applicationset should have been created, and a namespace with the name <code>paasname-argocd</code> should have been created, and a quota with the name <code>paasname-argocd</code> should have been created, and quota conform to the points below.</p> <p>Quota points:</p> <ol> <li>Assess a quota with the name <code>paasnaam-argocd</code> was created;</li> <li>Assess that the <code>quota_label</code> label was used as selector on the quota;</li> <li>Assess that the quota selector was set in such a manner so that only the <code>paasnaam-argocd</code> namespace is selected;</li> <li>Assess that the size of the quota equals the size of the default quota specified in the paas_config;</li> </ol> <p>Default_permissions points:</p> <ol> <li>Assess that a rolebinding for <code>monitoring-edit</code> is created</li> <li>Assess that the <code>monitoring-edit</code> rolebinding contains the <code>argo-service-applicationset-controller</code> service account</li> <li>Assess that the <code>monitoring-edit</code> rolebinding contains the <code>argo-service-argocd-application-controller</code> service account</li> </ol> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#capability-tekton","title":"Capability Tekton","text":"<p>Quota points:</p> <ol> <li>Assess a quota with the name <code>paasnaam-tekton</code> was created;</li> <li>Assess that the <code>quota_label</code> label was used as selector on the quota;</li> <li>Assess that the quota selector was set in such a manner so that only the <code>paasnaam-tekton</code> namespace is selected;</li> <li>Assess that the size of the quota equals the size of the default quota specified in the paas_config;</li> </ol> <p>Default_permissions points:</p> <ol> <li>Assess that a rolebinding for <code>monitoring-edit</code> is created</li> <li>Assess that the <code>monitoring-edit</code> rolebinding contains the <code>tekton</code> service account</li> <li>Assess that a rolebinding for <code>alert-routing-edit</code> is created</li> <li>Assess that the <code>alert-routing-edit</code> rolebinding contains the <code>tekton</code> service account</li> </ol>"},{"location":"development-guide/e2e-test-details/#capability-sso","title":"Capability SSO","text":"<p>What we test: creating a <code>Paas</code> with a capability named: <code>sso</code> enabled.</p> <p>Scenarios:</p> <ol> <li>A minimal <code>Paas</code> with a capability named <code>sso</code> enabled without a capability quota. Given a minimal <code>Paas</code> and <code>sso</code> capability configuration, when the minimal <code>Paas</code> is created with the <code>sso</code> capability enabled, then the list entry in the applicationset should have been created, and a namespace with the name <code>paasname-sso</code> should have been created, and a quota with the name <code>paasname-sso</code> should have been created, and the quota conforms to the points below.</li> </ol> <p>Quota points:</p> <ol> <li>Assess that the <code>quota_label</code> label was used as selector on the quota;</li> <li>Assess that the quota selector was set in such a manner so that only the <code>paasnaam-sso</code> namespace is selected;</li> <li> <p>Assess that the size of the quota equals the size of the default quota specified in the paas_config;</p> </li> <li> <p>The <code>Paas</code> from scenario 1 is removed. Given a the <code>Paas</code> remaining from scenario 1 above, when said <code>Paas</code> is deleted, then the associated <code>Quota</code> should have been removed, then the associated <code>Namespace</code> should have been removed, then the associated list entry in the <code>ApplicationSet</code> should have been removed.</p> </li> </ol> <p>Post scenarios: reset environment to clean slate.</p>"},{"location":"development-guide/e2e-test-details/#configurable-capabilities","title":"Configurable capabilities","text":"<p>What we test: adding a new capability with configuration</p> <p>Scenarios:</p> <ol> <li>Add cap5 in a Paas and check that it does not work when not yet defined in config</li> </ol>"},{"location":"development-guide/maintaining/","title":"Introduction","text":"<p>This file documents the methods and standards that should be applied by the maintainers of this project. For example: how to create a new release.</p>"},{"location":"development-guide/maintaining/#standards-used","title":"Standards used","text":""},{"location":"development-guide/maintaining/#commits","title":"Commits","text":"<p>We adhere to the Conventional Commits v1.0 standard.</p>"},{"location":"development-guide/maintaining/#versioning","title":"Versioning","text":"<p>For versioning purposes, we adhere to the SemVer v2.0.0 standard with a side note that we always prefix the semantic version number with the character 'v'. This stands for \"version\".</p> <p>As a quick summary, this means we use version numbers in the style of vX.Y.Z. With:</p> <ul> <li>X being major, including breaking, changes;</li> <li>Y being minor, possibly including patch but never breaking, changes;</li> <li>Z being a patch, but never breaking, changes;</li> </ul>"},{"location":"development-guide/maintaining/#methods-used","title":"Methods used","text":""},{"location":"development-guide/maintaining/#creating-a-release","title":"Creating a Release","text":"<p>We release from <code>main</code>. All changes to <code>main</code> are made through PRs. Merging a PR triggers the release drafter action to create a draft release.</p> <p>The process to create a release is mostly automated. To start it:</p> <ul> <li>Merge one or more PRs to <code>main</code>;</li> <li>Ensure completeness;</li> <li>Edit the draft release and publish it.</li> </ul>"},{"location":"development-guide/maintaining/#important-no-backports-policy","title":"Important: No Backports Policy","text":"<p>We do not support backports to previous release versions. Fixes are only provided for the current main release series. For example, if version 2.x.x is the active release series, no fixes will be made or backported to the 1.x.x line.</p> <p>We follow a roll-forward support model:</p> <ul> <li>All users are expected to upgrade to the latest available release to receive fixes.</li> <li>Fix releases (patch versions) are provided for the current main release series only.</li> <li>Users remaining on older versions do so at their own risk, as we do not provide   maintenance or security updates for them.</li> </ul> <p>This approach allows us to focus our efforts on improving the latest version without fragmenting support across multiple release lines.</p>"},{"location":"development-guide/maintaining/#creating-a-hotfix-release","title":"Creating a Hotfix Release","text":"<p>Hotfix releases are created from the relevant tag. The process is similar to creating a regular release.</p> <p>The process is as follows:</p> <ul> <li>Create a new branch based on the latest release tag of the current main release series   that needs the fix;</li> <li>Merge one or more PRs to this branch;</li> <li>Ensure completeness;</li> <li>Edit the draft release and publish it;   Ensure the release only contains the hotfix!</li> <li>Merge the hotfix branch back into <code>main</code> to keep <code>main</code> up to date.</li> </ul> <p>Note: Hotfix releases are only supported for the actively maintained release   series. We do not create hotfixes for previous major versions.</p>"},{"location":"overview/","title":"Introduction to the Paas Operator","text":"<p>In a microservice environment organizations can easily build and maintain thousands of apps. For each app there is a development process which consists of many types of technologies utilizing many types of resources.</p> <p>Some examples include:</p> <ul> <li>Git repositories with code, configuration, documentation, etc.;</li> <li>CI infrastructure;</li> <li>CD infrastructure;</li> <li>image repositories to hold image artifacts;</li> <li>the actual namespace running the end application;</li> <li>and more...</li> </ul> <p>Many of these artifacts can be deployed separately for every app, and would then run in their own namespace.</p> <p>The idea behind the Paas Operator is to bring all of these many pieces of the development process together in a single context we like to call a 'Project as a Service', e.a. Paas. The Paas operator then can be used to define a Paas for every App, and will deploy all the required artifacts accordingly. On top of that, the Paas operator implements multi-tenancy between the many Paas resources.</p> <p>Which means that, by leveraging the Paas operator, an organization can:</p> <ul> <li>bring together all resources belonging to an App into a single unit called a Paas</li> <li>maintain multi-tenancy between Paas instances</li> <li>enable developers with capabilities to be used as part of the process behind maintaining the App</li> </ul> <p>This documentation site is arranged into a generic section called overview, a user section, an administrator section, and a developer section. The Core Concepts pages in the overview section are usually a good starting point.</p> <p>If you have any questions or feel that certain parts of the documentation can be improved or expanded, feel free to create a PR (Pull Request).</p> <p>For full contribution guidelines, see the <code>CONTRIBUTING.md</code> file in the root of the repository, the About &gt;&gt; Contributing section and/or the Development Guide.</p>"},{"location":"overview/glossary/","title":"Glossary","text":""},{"location":"overview/glossary/#capabilities","title":"Capabilities","text":"<p>A capability is extra functionality that can be added to your Paas simply by enabling it through your PaasConfig.</p> <p>Examples can include, but are not limited to, ArgoCD, Tekton or Grafana.</p>"},{"location":"overview/glossary/#cluster-wide-quotas","title":"Cluster Wide Quotas","text":"<p>With Cluster Wide (resource) Quotas (CWQ), cluster admins can bring all resources for all Paas'es belonging to a capability, together in one cluster wide resource pool.</p> <p>This brings down over commit at the expense of the risk of resource sharing.</p> <p>For more details, see the relevant details in the administrators section</p>"},{"location":"overview/glossary/#crypttool","title":"Crypttool","text":"<p>The crypttool is a small command-line utility that allows a user to perform some simple operations in regard to secrets in a Paas.</p> <p>Basic functionality includes sub-commands for <code>encrypt</code>, <code>decrypt</code> and <code>re-encrypt</code> in regard to Paas related secrets.</p> <p>The <code>re-encrypt</code> sub-command specifically will parse the yaml/json file for a Paas, decrypt the SSH secrets with the previous private key, re-encrypt with the new public key &amp; write back the Paas configuration to the file in either yaml or json format.</p> <p>This will allow for key rotation.</p> <p>It can also be used to <code>generate</code> a new public/private key pair.</p> <p>The crypttool is managed from its own repository on GitHub at https://github.com/belastingdienst/opr-paas-crypttool.</p>"},{"location":"overview/glossary/#groups-openshift","title":"Groups [openshift]","text":"<p>Access to a Paas is granted to specific groups, which can be listed in the Paas.Groups spec.</p> <p>We are working on redesigning user management. The goal is to not be responsible for group / user management, only for creating rolebindings to groups specified in the Paas.</p> <p>A group can contain roles that allow them certain permissions, users and/or an LDAP query. When configured, the LDAP query takes presedence above the specified users. This OpenShift specific feature relies on the groupsync. The paas operator will only create a rolebinding to a group named after the CN value. It is expected that the groupsync operator will create the group following the query value. One can think of a cronjob to list all queries from all Paas resources and sync those using the groupsync. </p>"},{"location":"overview/glossary/#managedbypaas","title":"ManagedByPaas","text":"<p>This is a field in the PaasConfig, and feature, that allows the user to indicate that this Paas is actually managed by another Paas' ArgoCD.</p>"},{"location":"overview/glossary/#namespace-paasns","title":"Namespace / PaasNs","text":"<p>Namespaces can be used to define extra namespaces to be created as part of this Paas project.</p>"},{"location":"overview/glossary/#quotas","title":"Quotas","text":"<p>There a various quotas that can be configured, but essentially they are: cluster wide, per Paas or for a capability.</p>"},{"location":"overview/glossary/#requestor","title":"Requestor","text":"<p>The requestor is an informational field in the PaasConfig, which can contain a string that is intended to point to the person or group responsible for the application / Paas.</p> <p>This could be an ITIL group, Service desk name, email address or any random string.</p>"},{"location":"overview/glossary/#ssh-secrets","title":"SSH Secrets","text":"<p>You can add SSH keys, which are a type of secret, to your Paas for ArgoCD to use so it can access a git repository. For example on a self-hosted GitHub or BitBucket instance.</p> <p>The SSH secrets must be encrypted with the public key corresponding to the private key that was deployed together with the Paas operator.</p>"},{"location":"overview/glossary/#web-service","title":"Web service","text":"<p>The web service exposes a <code>/v1/encrypt</code> endpoint that allows a user to encrypt a secret using that cluster's private key.</p> <p>Apart from the encrypt endpoint, some standard endpoints like <code>/healthz</code>, <code>/readyz</code>, <code>/version</code> and <code>/metrics</code> are exposed.</p>"},{"location":"overview/core_concepts/","title":"Core concepts used in the Paas operator","text":"<p>By leveraging the Paas operator, an organization can:</p> <ul> <li>bring together all resources of a microservices into a single unit called a Paas</li> <li>maintain multi tenancy between Paas instances</li> <li>enable developers with capabilities to be used as part of the process behind maintaining the microservices</li> </ul> <p>Read more about these and other Core Concepts of the Paas operator in these pages.</p>"},{"location":"overview/core_concepts/authorization/","title":"Authorization","text":"<p>The whole idea is to create a multi tenancy solution which allows DevOps teams to request a context for their project, which we like to call a 'Project as a Service', e.a. Paas.</p> <p>Requestors of a Paas have the option to set up permissions for groups. Groups can get permissions on namespaces and thereby for all resources in that namespace.</p> <p>Configuring authorization is done by:</p> <ul> <li>Cluster administrators defining role mappings in the PaasConfig;</li> <li>DevOps engineers specifying groups in their Paas resources;</li> <li>DevOps engineers can specify groups in their PaasNs resources;</li> <li>For every PaasNs the PaasNs controller derives the required RoleBindings and   creates as required;</li> <li>If a list is specified in the PaasNs it is correlated to the Paas;     when not defined all groups as specified in the Paas are used by default.</li> <li>For every group, the Paas definition is checked for the functional roles;     when not defined the default role mapping is used.</li> <li>When a group spec holds the <code>users</code> spec and no <code>query</code> value, the OpenShift group gets prefix by     the paas-name to make groups unique and prevent unforeseen access to other Paas'es.</li> <li>When a group spec holds a <code>query</code> value, this takes precedence over the optional <code>users</code> spec.</li> <li>For every functional role the technical roles are derived from the PaasConfig;</li> <li>For every PaasNs namespace the PaasNs controller creates a role binding for     every applicable technical role, and adds the groups that should have the     required permissions;</li> </ul>"},{"location":"overview/core_concepts/authorization/#config-examples","title":"Config examples","text":""},{"location":"overview/core_concepts/authorization/#paasconfig","title":"PaasConfig","text":"<p>The PaasConfig (managed by cluster admins) can be configured as follows:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasConfig\nmetadata:\n  name: opr-paas-config\nspec:\n  rolemappings:\n    # All groups defined in a Paas without any roles will have the `default`\n    # functional role which maps to the OpenShift ClusterRole called view\n    default:\n      - view\n    # All groups defined in a Paas with the `edit` functional role will have a\n    # RoleBinding for the ClusterRoles `edit`, `alert-routing-edit`, and\n    # `monitoring-edit`\n    edit:\n      - edit\n      - alert-routing-edit\n      - monitoring-edit\n    # All groups defined in a Paas with the `view` functional role will have a\n    # RoleBinding for the ClusterRoles `view`\n    readonly:\n      - view\n    # All groups defined in a Paas with the `admin` functional role will have\n    # a RoleBinding for the ClusterRoles `admin`, `alert-routing-edit`, and\n    # `monitoring-edit`\n    admin:\n      - admin\n      - alert-routing-edit\n      - monitoring-edit\n  # Required fields with placeholder values\n  capabilities:\n    example-capability:\n      applicationset: example-appset\n      default_permissions: {}\n      extra_permissions: {}\n      quotas:\n        clusterwide: false\n        defaults: {}\n        min: {}\n        max: {}\n        ratio: 0\n  decryptKeyPaths:\n    - /path/to/decrypt/key\n</code></pre> <p>Note</p> <p>Groups that only have view defined will have the same permissions as groups without any functional roles.</p>"},{"location":"overview/core_concepts/authorization/#paas","title":"Paas","text":"<p>Devops engineers could create a Paas with the following definition:</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  requestor: my-team\n  groups:\n    # An OpenShift group called `my-paas-us` is created, and `me` and `you` are added to this group.\n    # `us` group has default permissions\n    us:\n      users:\n        - me\n        - you\n      roles:\n        - admin\n        - edit\n        - view\n    # An OpenShift group called `my-paas-them` is created, and `friend` is added to this group.\n    them:\n      users:\n        - friend\n      # `them` group has view permissions\n      roles:\n        - view\n    # A rolebinding to an OpenShift group called `others` is created, as the group is expected to be created by the groupsync operator, with its name being the CN value.\n    # The users spec will be ignored.\n    others:\n      query: 'CN=others,..'\n      users:\n        - friend\n  capabilities:\n    # For all capability namespaces (e.a. my-paas-argocd), there will be RoleBindings\n    # for `admin`, `edit`, `alert-routing-edit`, and `monitoring-edit`\n    argocd: {}\n  # For all user namespaces (my-paas-cicd, my-paas-test, and my-paas-prod), there\n  # will be RoleBindings for `admin`, `edit`, `alert-routing-edit`, and `monitoring-edit`\n  namespaces:\n    - cicd\n    - test\n    - prod\n  quota:\n    limits.cpu: \"40\"\n</code></pre> <p>With this example (combined with the operator config example), the following would apply:</p> <ul> <li>In all namespaces (<code>my-paas-cicd</code>, <code>my-paas-test</code>, <code>my-paas-prod</code> and <code>my-paas-argocd</code>),   there will be RoleBindings for <code>admin</code>. They will all contain the groups <code>us</code> group;</li> <li>For all namespaces (<code>my-paas-cicd</code>, <code>my-paas-test</code>, <code>my-paas-prod</code> and <code>my-paas-argocd</code>),   there will be RoleBindings for <code>view</code>. They will all contain the groups <code>my-paas-us</code>, and <code>my-paas-them</code>;</li> </ul>"},{"location":"overview/core_concepts/authorization/#paasns","title":"PaasNS","text":"<p>DevOps engineers could additionally create a PaasNS with the following definition:</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasNS\nmetadata:\n  # The name of the resulting namespace would be my-paas-adminonly ([paas name]-[paasns name])\n  name: adminonly\n  namespace: my-paas-argocd\nspec:\n  paas: my-paas\n  # The namespace would only contain RoleBindings for the `my-paas-us` group, which drills\n  # down to the `admin`, `edit`, `view`, `alert-routing-edit`, and `monitoring-edit` ClusterRoles.\n  groups:\n    - us\n</code></pre>"},{"location":"overview/core_concepts/authorization/#caveats","title":"Caveats","text":"<ul> <li>All groups will have the permissions as specified in the Paas.</li> <li>Next to permissions on groups and users, there is also capabilities to implement   permissions for service accounts. See extra_permissions for   more info.</li> </ul>"},{"location":"overview/core_concepts/capabilities/","title":"Paas Capabilities","text":"<p>The whole idea of Paas is to create a multi tenancy solution which allows DevOps teams to request a context for their project, which we like to call a 'Project as a Service', e.a. Paas.</p> <p>As part of the Paas we want to allow DevOps teams to consume capabilities 'As A Service'. Examples of such capabilities are:</p> <ul> <li>ArgoCD (Continuous Delivery);</li> <li>Tekton (Continuous Integration);</li> <li>Grafana (Observability); and</li> <li>KeyCloak (Single Sign On);</li> </ul> <p>However, the list could be longer in the future.</p> <p>Every Paas could have one or more of such capabilities defined, which means they get these capabilities with the required permissions. The DevOps team requires no specific knowledge or permissions to use these capabilities.</p> <p>They are managed by a cluster wide ArgoCD, which creates them according to the standards as defined by the platform team. They would be deployed specifically for their Paas and only usable in that context.</p> <p>We want Product teams to be able to define which capabilities should be available, and to have control over the components that comprise these capabilities.</p> <p>Therefore, it is designed a follows:</p> <ul> <li>The available capabilities are all defined in the PaasConfig   Per capability the following can be defined:<ul> <li>the default quota to be used when no quota is set in the Paas</li> <li>if the cluster wide quota feature should be enabled for this capability</li> <li>the ApplicationSet that can be reconfigured (new entry in the list generator)   for each Paas with the capability defined</li> </ul> </li> <li>For every Paas where the capability is defined, the Paas controller will create:<ul> <li>a PaasNs</li> <li>an entry in the ApplicationSet List Generator which in creates a new Application,   which in turn makes a cluster wide ArgoCD deployment read from the configured git   repo and create the required resources in the namespace as required</li> </ul> </li> </ul>"},{"location":"overview/core_concepts/capabilities/#example","title":"Example:","text":""},{"location":"overview/core_concepts/capabilities/#paasconfig","title":"PaasConfig","text":"<p>In the PaasConfig the following could be configured:</p> <p>Example</p> <pre><code>spec:\n  capabilities:\n    # Config for the argocd capability\n    argocd:\n      # For every Paas with this capability defined, the list generator in the\n      # paas-argocd ApplicationSet should be extended\n      applicationset: paas-argocd\n      # Quotas can be set in the Paas, but for these quotas there are defaults to\n      # apply when not set in the Paas.\n      quotas:\n        clusterwide: false\n        defaults:\n          limits.cpu: \"7\"\n          requests.cpu: \"3\"\n        min: {}\n        max: {}\n        ratio: 0\n      # For all Paas's with the argocd capability defined, by default also set\n      # these permissions for the specified service account\n      default_permissions:\n        argocd-argocd-application-controller:\n          - monitoring-edit\n          - alert-routing-edit\n      extra_permissions: {}\n    # Config for the grafana capability\n    grafana:\n      # For every Paas with this capability defined, the list generator in the\n      # paas-grafana ApplicationSet should be extended\n      applicationset: paas-grafana\n      # Quotas can be set in the Paas, but for these quotas there are defaults to\n      # apply when not set in the Paas.\n      quotas:\n        clusterwide: false\n        defaults:\n          limits.cpu: \"2\"\n          requests.cpu: \"1\"\n        min: {}\n        max: {}\n        ratio: 0\n      default_permissions: {}\n      extra_permissions: {}\n</code></pre>"},{"location":"overview/core_concepts/capabilities/#example-applicationset","title":"Example ApplicationSet","text":"<p>The ArgoCD Applicationset could look like this:</p> <p>Example</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  # name of the applicationset, this can be used for Paas instances with the\n  # argocd capability defined\n  name: paas-argocd\n  # Specify the namespace of a cluster wide ArgoCD. On OpenShift the openshift-gitops\n  # namespace is meant to have the only cluster wide ArgoCD.\n  namespace: openshift-gitops\nspec:\n  # This list can be empty, but is required in the definition.\n  # Note that the Paas operator will create and manage a list generator here. So\n  # when managing this applicationset with the cluster wide ArgoCD requires setting\n  # up resourceExclusions\n  generators: []\n  template:\n    metadata:\n      name: \"{{paas}}-capability-argocd\"\n    spec:\n      destination:\n        namespace: \"{{paas}}-argocd\"\n        server: \"https://kubernetes.default.svc\"\n      project: \"{{paas}}\"\n      source:\n        kustomize:\n          commonLabels:\n            capability: argocd\n            clusterquotagroup: \"{{requestor}}\"\n            paas: \"{{paas}}\"\n            service: \"{{service}}\"\n            subservice: \"{{subservice}}\"\n        path: paas-capabilities/argocd\n        repoURL: \"ssh://git@github.com/belastingdienst/my-paas-capabilities.git\"\n        targetRevision: master\n      syncPolicy:\n        automated:\n          selfHeal: true\n</code></pre>"},{"location":"overview/core_concepts/capabilities/#example-paas","title":"Example Paas","text":"<p>This would mean that someone could create a Paas with a block like this:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  capabilities:\n    argocd:\n      custom_fields:\n        # Bootstrap application to point to the root folder\n        gitPath: .\n        # Bootstrap application to point to the main branch\n        gitRevision: main\n        # Bootstrap application to point to this repo\n        gitUrl: \"ssh://git@github.com/belastingdienst/my-paas-repo.git\"\n    grafana:\n      quota:\n        limits.cpu: \"5\"\n        limits.memory: \"2Gi\"\n</code></pre> <p>This would result in:</p> <ul> <li>a <code>my-paas-argocd</code> <code>ClusterResourceQuota</code> and a <code>my-paas-grafana</code> <code>ClusterResourceQuota</code>;</li> <li><code>my-paas-argocd</code> has default quotas as specified in the configuration;      (<code>limits.cpu: \"7\"</code>, <code>requests.cpu: \"3\"</code>)</li> <li><code>my-paas-grafana</code> has <code>limits.cpu</code> overridden to \"5\", <code>requests.cpu</code> defaulting to \"1\" and <code>limits.memory</code> set to '2Gi';</li> <li>a namespace called <code>my-paas-argocd</code> linked to the <code>my-paas-argocd</code> <code>ClusterResourceQuota</code>;</li> <li>a namespace called <code>my-paas-grafana</code> linked to the <code>my-paas-grafana</code> <code>ClusterResourceQuota</code>;   The <code>applicationset</code> has an extra entry for the namespace so that the cluster-wide   ArgoCD will create a grafana deployment in this namespace.</li> </ul>"},{"location":"overview/core_concepts/integrations/","title":"OpenShift","text":"<p>The whole idea we tried to solve with the Paas operator, is to create a multi tenancy solution which allows DevOps teams to request a context for their project, which we like to call a 'Project as a Service', e.a. Paas.</p> <p>This aligns heavily with large clusters servicing multiple DevOps teams, which aligns closely with how we see other organizations running OpenShift.</p> <p>For other deployments we mostly see small (nearly vanilla) K8S deployments, where each cluster is only servicing one Devops team specifically. However, we do also feel that having a single interface to consume features like user management, capabilities, and quota management could be helpful to have in non-OpenShift environments too.</p>"},{"location":"overview/core_concepts/integrations/#openshift-specific-dependencies","title":"OpenShift specific dependencies","text":"<p>We rely on OpenShift for the following features:</p> <ul> <li>Cluster Wide Quotas, which seems to be built into the core of OpenShift and does   not seem to have a k8s generic alternative. Running on vanilla K8S, we would   probably leave options to have one quota for multiple namespaces and implement   normal ResourceQuota definitions instead.</li> <li>We currently rely on the Groups implementation in OpenShift. We are revisiting   the current architecture and will work towards a solution that can work natively   in K8S as good as possible.</li> </ul>"},{"location":"overview/core_concepts/integrations/#argocd-integrations","title":"ArgoCD integrations","text":""},{"location":"overview/core_concepts/integrations/#argocd-applicationset-list-generators","title":"ArgoCD ApplicationSet List Generators.","text":"<p>The Paas operator has the option to create capabilities and to keep the implementations of capabilities freely programmable we have integrated the Paas operator with ArgoCD.</p> <p>This means that the expectations of running the Paas operator with capabilities, is that there is a cluster wide ArgoCD deployment available, and for each capability there is an additional ApplicationSet to manage Paas capabilities.</p> <p>The Paas operator integrates through these capabilities by managing a list generator in the ApplicationSet, which in turn creates an ArgoApplication for every Paas with  the capability enabled.</p>"},{"location":"overview/core_concepts/paas/","title":"Paas","text":"<p>The whole idea is to create a multi tenancy solution which allows DevOps teams to request a context for their project, which we like to call a 'Project as a Service', e.a. Paas.</p> <p>The Paas is a higher level construct, which consists of many parts, including:</p> <ul> <li>namespaces;</li> <li>Quotas;</li> <li>authorization;</li> <li>capabilities;</li> </ul> <p>DevOps teams request this Paas context by defining a Paas resource through the K8S API.</p> <p>At the very least a Paas resource has the following defined:</p> <ul> <li><code>apiVersion</code>, kind (as needs to be defined for every other k8s resource)</li> <li><code>metadata.name</code>, which is unique (cluster-wide)</li> <li><code>spec.requestor</code>, which is an informational field representing the requestor of   this Paas, for administrative purposes</li> <li><code>quota</code>, which sets the amount of quota for all namespaces that are part of   this Paas (capability namespaces excluded)</li> </ul> <p>Additionally, the following optional settings can also be defined:</p> <ul> <li><code>capabilities</code>, which can be used to enable Paas extensions such as an ArgoCD to   manage all Paas namespaces, Grafana to monitor Paas namespaces, etc. More information   can be found in our capabilities documentation.</li> <li><code>spec.secrets</code>, which can be used to seed secrets that ArgoCD requires for   accessing repositories. See secrets for more information.</li> <li><code>spec.groups</code>, which can be used to configure authorization. See authorization   for more information.</li> <li><code>spec.namespaces</code>, which can be used to define namespaces as part of the Paas.   Alternatively, they can be manually defined as PaasNs resources.</li> </ul>"},{"location":"overview/core_concepts/paas/#example-paas","title":"Example Paas","text":"<p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  capabilities:\n    # Define argocd\n    argocd:\n      custom_fields:\n        # Bootstrap application to point to the root folder\n        gitPath: .\n        # Bootstrap application to point to the main branch\n        gitRevision: main\n        # Bootstrap application to point to this repo\n        gitUrl: \"ssh://git@github.com/belastingdienst/my-paas-repo.git\"\n    # Define grafana\n    grafana:\n      quota:\n        limits.cpu: \"5\"\n        limits.memory: \"2Gi\"\n</code></pre> <p>Notes</p> <p>Labels defined on Paas resources are copied to child resources such as PaasNs, quotas, groups, ArgoApps, ArgoProjects, etc.</p> <p>The only exception is the <code>app.kubernetes.io/instance</code>.</p>"},{"location":"overview/core_concepts/paasns/","title":"PaasNs","text":"<p>We wanted to enable our DevOps teams without them requiring self-provisioner permissions. The main reason is that self-provisioner is too broadly usable and abusable, and as such we could not enforce the guardrails we felt that a true multi-tenancy solution should protect.</p> <p>However, we also wanted to bring them as much self-service as we could think of and dynamically creating and destroying namespaces felt like part of the flexibility that would be required.</p> <p>For this exact reason, we have introduced the concept of PaasNs.</p> <p>The concept works as follows:</p> <p></p> <p>The operator creates an overview of all namespaces that should be there. These namespaces could be required by: - a capability - an entry in the paas.Spec.Namespaces block - a PaasNs</p> <p>As an example, assuming a Paas called <code>my-paas</code> with:</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  capabilities:\n    argocd: {}\n  requestor: my-team\n  quota:\n    limits.cpu: \"40\"\n  secrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n</code></pre> <p>To add user namespaces, the following options are available:</p> <ul> <li>In this Paas, the <code>spec.namespaces</code> map could have a definitions of namespaces.   If this was set to (just as an example) <code>{ ns1: {}, ns2: {}, ns3: {} }</code>,   the Paas controller would create three PaasNs resources in a namespace called <code>my-paas</code>.</li> </ul> <p>The PaasNs controller would process them as being part of <code>my-paas</code> and create   the following namespaces: <code>my-paas-ns1</code>, <code>my-paas-ns2</code> and <code>my-paas-ns3</code>.</p> <ul> <li>Another option would be to manually create a PaasNs resource in a namespace   which already belongs to <code>my-paas</code>.</li> </ul> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasNS\nmetadata:\n  name: my-ns\n  namespace: my-paas-argocd\n</code></pre> <ul> <li> <p>Yet another option would be to create a PaasNs resource using automation such as   <code>argocd</code> or <code>tekton</code>.   It is advised to create them in the namespace belonging to the capability that   is being used (e.a. <code>my-paas-argocd</code> or <code>my-paas-tekton</code>).</p> </li> <li> <p>A cool feature is that PaasNs resources could be stacked. This means that a   PaasNs resource could be in a namespace which is the product of a PaasNs   resources in a namespace, which...</p> </li> </ul> <p>As the top namespace is the product of a PaasNs resource in the namespace   called after the Paas, all child PaasNs's are assumed to be part of the same Paas.</p> <p>Note</p> <p>Note that besides creating the namespaces, the PaasNs controller also properly sets up the namespace with the proper quota and the proper authorization.</p>"},{"location":"overview/core_concepts/secrets/","title":"Encrypted Secrets","text":"<p>To enable bootstrapping a project 100% 'as code', the Paas operator has a feature called <code>Encrypted Secrets</code>.</p> <p>The idea is that people can create a Paas to bootstrap an application front to back, including required namespaces, quotas, an application specific ArgoCD and a running application, in one go.</p> <p>However, when using private repositories, ArgoCD needs to be provided with an SSH key (as a secret) for ArgoCD to gain access to the git repository. These ssh secrets need to be provided before ArgoCD can start acting on repo contents, which is why providing these secrets is part of the Paas solution.</p> <p>Another consideration was that we want secrets to be defined in a Paas, and since a Paas can be public, we naturally don't want the secrets to be plain-text, which is why we implemented encryption.</p> <p>Encryption is based on RSA where a public key (shared with everyone) is used to encrypt, and a private key (deployed with the Paas operator) is used to decrypt. In this way everyone can encrypt, but only the Paas operator can decrypt.</p> <p>For ease of use, and to enable extra management capabilities, the Paas operator comes with additional tooling:</p> <ul> <li>an API, which can be used to encrypt without needing to share the public key;</li> <li>A crypt tool, available from a separate repository, that can be used to   encrypt, re-encrypt, generate key pairs, and inspect encrypted keys;</li> </ul> <p>You can find the crypt tool at https://github.com/belastingdienst/opr-paas-crypttool</p> <p>Note</p> <p>Note that the crypt tool is not part of the operator anymore, but can be used separately. It was moved into a separate repository after the release of version v1.12.0 of the operator.</p> <p><code>opr-paas-crypttool</code> requires access to the private key to be usable...</p>"},{"location":"overview/core_concepts/secrets/#how-it-works","title":"How it works","text":"<ul> <li>The DevOps engineer encrypts his with the api, or with the CLI;   Encryption is done using the Paas public key (the result can only be decrypted   using the Paas private key).</li> <li>multiple options:</li> <li>The DevOps engineer adds the encrypted secret to the <code>Paas.Spec.Secrets</code> block</li> <li>The DevOps engineer adds the encrypted secret to the <code>Paas.Spec.Namespaces[*].Secrets</code> block</li> <li>The DevOps engineer adds the encrypted secret to the <code>Paas.Spec.Capabilities[*].Secrets</code> block</li> <li>The DevOps engineer adds the encrypted secret to a <code>PaasNS.Spec.Secrets</code> block</li> <li>Paas controller decrypts the secret using the private key and the name of the paas,   creates the required namespace and creates the secrets in the namespaces as required</li> </ul>"},{"location":"overview/core_concepts/secrets/#defining-a-secret","title":"Defining a secret","text":"<p>secrets are processed by the PaasNs controller and as such need to be defined in the PaasNs. Additionally, <code>secret</code>s can also be created in a Paas.</p>"},{"location":"overview/core_concepts/secrets/#defining-secrets-in-a-paas","title":"Defining secrets in a Paas","text":"<p>The Paas controller only manages secrets in Paas namespaces which can be defined as part of a Paas (generic, capability  or namespace), or a PaasNS.</p> <p>secrets can be defined in a Paas on three levels:</p> <ul> <li>as part of the spec, in which case the Paas controller will add the <code>secret</code>   to every namespace created by the Paas controller</li> <li>as part of capability, in which case the Paas controller will add the <code>secret</code>   to the namespace created for this capability specifically</li> <li>as part of a namespace defined in the namespaces block, in which case the Paas controller will add the <code>secret</code>   to the namespace specifically</li> </ul> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  capabilities:\n    argocd:\n      # Specifying a secret for a specific capability namespace\n      secrets:\n        \"ssh://git@github.com/belastingdienst/paas.git\": &gt;-\n          2wkeKebCnqgl...L/jDAUmhWG3ng==\n  namespaces:\n    mycustomns:\n      # Specifying a secret for a specific user namespace\n      secrets:\n        \"ssh://git@github.com/belastingdienst/paas.git\": &gt;-\n          2wkeKebCnqgl...L/jDAUmhWG3ng==\n  secrets:\n    # Specifying a secret for all namespaces belonging to this paas\n    \"ssh://git@github.com/belastingdienst/paas.git\": &gt;-\n      2wkeKebCnqgl...L/jDAUmhWG3ng==\n  requestor: my-team\n  quota:\n    limits.cpu: \"40\"\n</code></pre>"},{"location":"overview/core_concepts/secrets/#defining-secrets-in-a-paasns","title":"Defining secrets in a PaasNs","text":"<p>The PaasNs controller is the one to manage the secrets in the Paas namespaces a defined in the PaasNs (either manually created or managed by the Paas controller).</p> <p>The PaasNs controller will update secrets in the namespace if the <code>secret</code> value is changed in the PaasNs resource. However, when the key changes (e.a. <code>ssh://git@github.com/belastingdienst/paas.git</code> in the example below), the original secret is not removed.</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasNS\nmetadata:\n  name: my-ns\n  namespace: my-paas-argocd\nspec:\n  paas: my-paas\n  secrets:\n    # Specifying a secret for a specific PaasNs namespace\n    \"ssh://git@github.com/belastingdienst/paas.git\": &gt;-\n      2wkeKebCnqgl...L/jDAUmhWG3ng==\n</code></pre>"},{"location":"overview/core_concepts/secrets/#usecase-1-ssh-secrets","title":"Usecase 1: SSH secrets","text":"<p>One option (the most common usecase) is to add git credentials for argocd.</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-paas\nspec:\n  capabilities:\n    argocd:\n      # Specifying a secret for a specific capability namespace\n      secrets:\n        \"ssh://git@github.com/belastingdienst/paas.git\": &gt;-\n          2wkeKebCnqgl...L/jDAUmhWG3ng==\n  requestor: my-team\n  quota:\n    limits.cpu: \"40\"\n</code></pre>"},{"location":"overview/core_concepts/secrets/#how-it-works_1","title":"How it works","text":"<ul> <li>A DevOps engineer generates a SSH key pair;</li> <li>The DevOps engineer configures his public SSH key to be accepted by his git   repository (e.a. GitHub, gitlab, gitea, bitbucket, etc.)</li> <li>The DevOps engineer encrypts the private SSH key and adds to argocd capability</li> <li>Paas controller creates argocd namespace with ArgoCD and secret</li> <li>ArgoCD contacts git and uses the secret to authenticate;</li> <li>ArgoCD creates resources as is defined in the git repository;</li> <li>Application comes alive;</li> </ul>"},{"location":"user-guide/01_basic-usage/","title":"Basic Usage","text":""},{"location":"user-guide/01_basic-usage/#minimal-paas-managed-by-another-paas","title":"Minimal Paas managed by another Paas","text":"<p>Creating a configuration file to define a Paas is fairly straight forward. The configuration file should use the current API version <code>cpet.belastingdienst.nl/v1alpha2</code> and define a <code>kind: Paas</code>.</p> <p>The most minimal configuration requires at least a <code>name</code> in the <code>metadata</code> section and either a capability <code>argocd</code> that is <code>enabled</code>, or a <code>managedByPaas</code> entry.</p> <p>In the following example, we'll use the latter. The <code>managedByPaas</code> entry should contain the name of the Paas that is allowed to manage this Paas.</p> <p>Example Paas definition being managed by another Paas:</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  managedByPaas: trd-prt\n</code></pre>"},{"location":"user-guide/01_basic-usage/#minimal-paas-self-managed-using-argocd","title":"Minimal Paas, self-managed using ArgoCD","text":"<p>Example Paas definition, using its own ArgoCD:</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  capabilities:\n    argocd:\n      custom_fields:\n        gitPath: environments/production\n        gitRevision: main\n        gitUrl: &gt;-\n          ssh://git@git.example.nl/example/example-repo.git\n</code></pre>"},{"location":"user-guide/02_application-namespaces/","title":"Application namespaces","text":"<p>To deploy a (micro) service, usually a Paas would be extended by one or more namespaces. Mostly these namespaces would be used for running the actual application components. All application namespaces use a combined quota belonging specifically to this Paas.</p>"},{"location":"user-guide/02_application-namespaces/#setting-paas-application-namespace-quota","title":"Setting Paas application namespace quota","text":"<p>Each Paas spec has a <code>required</code> field for specifying quota. Each quota has a name referring to the exact Resource Type and has a value defined as a k8s Resource Quantity.</p> <p>This setting is applied to a Cluster Resource Quota which is applied to all application namespaces created for this Paas.</p> <p>Note</p> <p>Capabilities have their own separate quotas which can be set from the capability block of a Paas. Capability quotas do not need to be included in the application quota.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  quota:\n    limits.cpu: '40'\n    limits.memory: 64Gi\n    requests.cpu: '20'\n    requests.memory: 32Gi\n    requests.storage: 200Gi\n</code></pre>"},{"location":"user-guide/02_application-namespaces/#adding-namespaces-in-the-paas-spec","title":"Adding namespaces in the Paas spec","text":"<p>It is possible to define a list of extra namespaces to be created within the Paas. These can be used for various purposes like dev, test and prod or for example a team member's personal test.</p> <p>These namespaces count towards the global quota requested by the Paas.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  namespaces:\n      mark: {}\n      tst: {}\n      acceptance: {}\n      prod: {}\n      joel: {}\n</code></pre>"},{"location":"user-guide/02_application-namespaces/#adding-paasns-resources","title":"Adding PaasNs resources","text":"<p>Alternatively, a PaasNS resource could be added to a namespace belonging to the Paas. Read more about this feature in the PaasNS documentation.</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasNS\nmetadata:\n  name: my-ns\n  namespace: my-paas-argocd\nspec:\n  paas: tst-tst\n</code></pre>"},{"location":"user-guide/02_capabilities/","title":"Utilizing capabilities","text":""},{"location":"user-guide/02_capabilities/#capabilities","title":"Capabilities","text":"<p>One of the core features of the Paas operator is to enable Paas users with capabilities. Capabilities need to be created and added to the cluster wide configuration of the Paas operator by administrators. After that Paas users can easily add the capabilities to their Paas.</p> <p>Read more about Paas capabilities in our core concepts documentation.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  capabilities:\n    grafana: {}\n    sso:\n      quota:\n        limits.cpu: '5'\n        limits.memory: 8Gi\n        requests.cpu: '2'\n        requests.memory: 2Gi\n        requests.storage: 100Gi\n    tekton:\n      quota:\n        limits.cpu: '32'\n        limits.memory: 32Gi\n        requests.cpu: '16'\n        requests.memory: 16Gi\n        requests.storage: 40Gi\n</code></pre>"},{"location":"user-guide/02_groups-and-users/","title":"Managing permissions","text":""},{"location":"user-guide/02_groups-and-users/#groups-and-users","title":"Groups and Users","text":"<p>For every Paas it is possible to define which k8s groups have permissions on resources belonging to the Paas. It is possible to manage group membership externally, with an LDAP sync solution based on <code>oc adm group sync</code>. It is also possible to have group membership managed by the Paas operator, by specifying users. However, we are working towards getting rid of user management through Paas, relying only on externally managed groups.</p> <p>For more information on authorization, please see Core Concepts - Authorization.</p> <p>Note</p> <p>When both an LDAP query and a list of users is defined, the LDAP query takes precedence above the users. The paas operator will, in that case, not create a group, relying on the <code>oc adm group sync</code> to manage it.</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  groups:\n    example_group:\n      query: &gt;-\n        CN=example_group,OU=example,OU=UID,DC=example,DC=nl\n    second_example_group:\n      users:\n        - jdsmith\n</code></pre>"},{"location":"user-guide/02_secrets/","title":"Secrets","text":"<p>It is possible to define secrets to be created in a namespace for a specific capability, or in every namespace generically. The main use case is to create secrets in the ArgoCD namespace so that it can read private repositories, which is where the name secrets came from in the first place. However, they can be used with other capabilities, and/or application namespaces as well.</p> <p>More info can be found in Core Concepts documentation on Secrets.</p>"},{"location":"user-guide/02_secrets/#prerequisites","title":"Prerequisites","text":"<p>Secrets are encrypted using asymmetric encryption and therefore require a public and private keypair. Keypairs must be generated and managed by administrators and can provide the public key to Users for encrypting secrets. For more info, please see the Admin guide on configuring secret encryption.</p>"},{"location":"user-guide/02_secrets/#encrypting-secrets","title":"Encrypting secrets","text":"<p>You can download the crypttool from the Downloads section of its repository. Once downloaded, the crypttool has two options for encrypting content:</p>"},{"location":"user-guide/02_secrets/#encrypting-a-file-with-crypttool","title":"Encrypting a file with crypttool","text":"<p>Example</p> <pre><code>./crypttool --encrypt-from-file ~/.ssh/id_rsa -paas-name tst-tst -key ~/Downloads/public.bin\n</code></pre>"},{"location":"user-guide/02_secrets/#encrypting-from-stdin-with-crypttool","title":"Encrypting from stdin with crypttool","text":"<p>Example</p> <pre><code>echo -e 'private investigations' | ./crypttool --encrypt-from-stdin -paas-name tst-tst -key ~/Downloads/public.bin\n</code></pre>"},{"location":"user-guide/02_secrets/#using-curl-against-the-webservice-api","title":"using cURL against the webservice api","text":"<p>Example</p> <pre><code>ENDPOINT_URL=\"https://paas-webservice-paas-system.apps.mycluster.example/v1/encrypt\"\nJSONTYPE='Content-Type: application/json'\nPAAS=tst-tst\nSECRET=$(awk '{printf \"%s\\\\n\", $0}' ~/.ssh/id_rsa)\ncurl -X POST \"${ENDPOINT_URL}\" -H \"${JSONTYPE}\" -d '{\"paas\":\"'${PAAS}'\",\"secret\":\"'${SECRET}'\"}'\n</code></pre>"},{"location":"user-guide/02_secrets/#other-options","title":"other options","text":"<p>Options are endless. Be creative...</p>"},{"location":"user-guide/02_secrets/#defining-secrets","title":"defining secrets","text":"<p>Encrypted Secrets can be specified in multiple places.</p> <p>By defining the secret in the Paas spec directly (<code>Paas.spec.secrets</code>) the secret will be created in all namespaces belonging to the paas.</p> <p>Example</p> <p>Setting an secret for all namespaces</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  secrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n</code></pre> <p>By defining the secret as part of a capability (such as <code>argocd</code>), the secret will be deployed in the namespace belonging to the capability specifically.</p> <p>Example</p> <p>Setting an secret for a specific capability</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  capabilities:\n    argocd:\n      ...\n      secrets:\n        'ssh://git@my-git-host/my-git-repo.git': &gt;-\n          2wkeKe...g==\n</code></pre> <p>By defining the secret as part of a PaasNs, the secret will be deployed in the corresponding namespace only.</p> <p>Example</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  capabilities:\n    # The argocd capability enabled\n    argocd: {}\n  requestor: my-team\n  quota:\n    limits.cpu: \"40\"\n  secrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n</code></pre>"},{"location":"user-guide/03_common_usecases/","title":"Common use cases","text":""},{"location":"user-guide/03_common_usecases/#develop-and-deploy-a-new-microservice","title":"Develop and deploy a new microservice","text":"<p>In this example, a developer has created some java code which is to become a new microservice running on a k8s cluster.</p> <p>In this organization, we have a very proactive and forthcoming group of administrators, which have enabled their dev teams with the following capabilities:</p> <ul> <li>forgejo;</li> <li>tekton;</li> <li>vault (HashiCorp Vault);</li> <li>harbor;</li> <li>argocd;</li> <li>grafana;</li> </ul> <p>Of course, this developer requires all of these capabilities, and additionally he requires a namespace for his production environment. Furthermore, this developer will set up options to dynamically create and destroy test namespaces with the (micro) service being deployed fully functional.</p>"},{"location":"user-guide/03_common_usecases/#defining-the-paas","title":"Defining the Paas","text":"<p>Let's first define the Paas:</p> <p>Example</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: my-kewl-app\nspec:\n  capabilities:\n    forgejo: {}\n    tekton: {}\n    vault: {}\n    harbor: {}\n    argocd: {}\n    grafana: {}\n  namespaces:\n    prod: {}\n  quota:\n    limits.cpu: '42'\n    limits.memory: 11Gi\n    requests.storage: 13Gi\n</code></pre>"},{"location":"user-guide/03_common_usecases/#what-actually-happens","title":"What actually happens","text":"<p>Once the Paas has been applied, the Paas operator takes over and the following happens:</p> <ul> <li>The following namespaces are created: my-kewl-app-forgejo, my-kewl-app-tekton,   my-kewl-app-vault, my-kewl-app-harbor, my-kewl-app-argocd, my-kewl-app-grafana, my-kewl-app-prod;</li> <li>The following ClusterResourceQuotas are created: my-kewl-app, my-kewl-app-forgejo,   my-kewl-app-tekton, my-kewl-app-vault, my-kewl-app-harbor, my-kewl-app-argocd, my-kewl-app-grafana;<ul> <li>Namespaces my-kewl-app-prod are linked to ClusterResourceQuota my-kewl-app;</li> <li>all other namespaces are linked to their own ClusterResourceQuotas named exactly like the namespace;</li> </ul> </li> <li>In a namespace with a cluster-wide ArgoCD the list generator in the ApplicationSets   belonging to the enabled capabilities are extended with an extra item for this Paas,   which in turn creates ArgoCD applications for the capability for this Paas;</li> <li>Each of these Applications triggers the cluster-wide ArgoCD to deploy all capability   resources in the specific namespace belonging to this Paas;</li> <li>All capabilities in the namespaces start coming to life;</li> <li>The developer logs in to forgejo, creates an organization, creates a configuration   repository and pushes his configuration definition.<ul> <li>immediately, the argocd belonging to this paas notices the configuration files,   and starts to apply;</li> <li>argocd creates tekton tasks, pipelines, trigger templates and event listeners in   the tekton namespace belonging to this Paas;</li> <li>argocd creates custom dashboards in the grafana namespace;</li> <li>argocd creates a production deployment in the my-kewl-app-prod namespace including   the required PostgreSQL database, Kafka deployment and Minio tenant;</li> </ul> </li> <li>The developer creates a code repository, with webhook integration to the tekton event   listener, and pushes his code;<ul> <li>immediately, tekton starts pulling his code, building images and pushes to harbor;</li> <li>after which the application deployment in my-kewl-app-prod picks up the image and becomes externally accessible;</li> <li>application receives data that requires encrypted storage, creates keypairs, stores   them in vault, encrypts the data and stores it in the Postgres database;</li> </ul> </li> </ul> <p></p>"},{"location":"user-guide/v1alpha1-conversion/","title":"Introduction","text":"<p>With release v2 we also released a new api v1alpha2 which has a slightly changed definition.</p>"},{"location":"user-guide/v1alpha1-conversion/#changes","title":"Changes","text":""},{"location":"user-guide/v1alpha1-conversion/#paas","title":"Paas","text":"<p>The following has changed between v1alpha1.Paas and v1alpha2.Paas:</p> <ul> <li> <p>The following fields are removed from the Paas Capabilities (Paas.Spec.Capabilities):</p> <ul> <li><code>enabled</code>: Remove field if set to true, or remove Capability when set to false</li> <li><code>gitPath</code>, <code>gitRevision</code>, <code>gitUrl</code>: Rewrite to custom fields</li> <li><code>sshSecrets</code>: Rename to <code>secrets</code></li> <li><code>namespaces</code>: Rewrite from a list to a map</li> </ul> </li> </ul> <p>Example</p> <p>This example of a v1alpha1 Paas</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha1\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  capabilities:\n    argocd:\n      # this field should be removed\n      enabled: true\n      gitPath: .\n      gitRevision: main\n      gitUrl: https://www.github.com/my-org/my-repo/\n      quota:\n        limits.cpu: '32'\n      # `sshSecrets` should be changed to `secrets`\n      sshSecrets:\n        'ssh://git@my-git-host/my-git-repo.git': &gt;-\n          2wkeKe...g==\n    # `tekton` is disabled and should be removed\n    tekton:\n      enabled: false\n  # `sshSecrets` should be changed to `secrets`\n  sshSecrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n  # `namespaces` should be rewritten from list to map\n  namespaces:\n    - ns1\n    - ns2\n</code></pre> <p>Would be rewritten as:</p> <pre><code>apiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: Paas\nmetadata:\n  name: tst-tst\nspec:\n  capabilities:\n    argocd:\n      quota:\n        limits.cpu: '32'\n      secrets:\n        'ssh://git@my-git-host/my-git-repo.git': &gt;-\n          2wkeKe...g==\n      custom_fields:\n        gitPath: .\n        gitRevision: main\n        gitUrl: https://www.github.com/my-org/my-repo/\n  secrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n  namespaces:\n    ns1: {}\n    ns2: {}\n</code></pre>"},{"location":"user-guide/v1alpha1-conversion/#paasns","title":"PaasNS","text":"<p>The following has changed between v1alpha1 and v1alpha2 PaasNS:</p> <ul> <li><code>sshSecrets</code>: Rename to <code>secrets</code></li> </ul> <p>Example</p> <p>This example of a v1alpha1 PaasNS</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha1\nkind: PaasNS\nmetadata:\n  name: my-ns\n  namespace: my-paas-argocd\nspec:\n  # This field is not required in v1alpha2\n  paas: tst-tst\n  # sshSecrets should be rewritten to `secrets`\n  sshSecrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n</code></pre> <p>Would be rewritten as follows</p> <pre><code>---\napiVersion: cpet.belastingdienst.nl/v1alpha2\nkind: PaasNS\nmetadata:\n  name: my-ns\n  namespace: my-paas-argocd\nspec:\n  secrets:\n    'ssh://git@my-git-host/my-git-repo.git': &gt;-\n      2wkeKe...g==\n</code></pre>"}]}