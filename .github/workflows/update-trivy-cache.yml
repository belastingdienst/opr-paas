# Note: This workflow only updates the cache. You should create a separate workflow
# for your actual Trivy scans. In your scan workflow, set TRIVY_SKIP_DB_UPDATE=true
# and TRIVY_SKIP_JAVA_DB_UPDATE=true.
#
# src: https://github.com/marketplace/actions/aqua-security-trivy#cache
name: Update Trivy Cache

on:
  schedule:
    - cron: '23 0 * * *'  # Run daily at 23 past midnight UTC (23 chosen randomly)
  workflow_dispatch:  # Allow manual triggering

# In order to update cache, needs `write` permission, see:
# https://docs.github.com/en/rest/authentication/permissions-required-for-github-apps?apiVersion=2022-11-28#repository-permissions-for-actions
permissions:
  actions: write

jobs:
  update-trivy-db:
    runs-on: ubuntu-latest
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - uses: oras-project/setup-oras@5c0b487ce3fe0ce3ab0d034e63669e426e294e4d # v1.2.2

      - name: Download and extract the vulnerability DB
        run: |
          mkdir -p $GITHUB_WORKSPACE/.cache/trivy/db
          oras pull ghcr.io/aquasecurity/trivy-db:2
          tar -xzf db.tar.gz -C $GITHUB_WORKSPACE/.cache/trivy/db
          rm db.tar.gz

      - name: Download and extract the Java DB
        run: |
          mkdir -p $GITHUB_WORKSPACE/.cache/trivy/java-db
          oras pull ghcr.io/aquasecurity/trivy-java-db:1
          tar -xzf javadb.tar.gz -C $GITHUB_WORKSPACE/.cache/trivy/java-db
          rm javadb.tar.gz

      - name: Cache DBs
        uses: actions/cache/save@0c907a75c2c80ebcb7f088228285e798b750cf8f # v4.2.1
        with:
          path: ${{ github.workspace }}/.cache/trivy
          key: cache-trivy-${{ steps.date.outputs.date }}