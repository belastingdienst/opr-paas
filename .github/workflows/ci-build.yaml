name: ci-build
on:
  pull_request:

env:
  # Golang version to use across CI steps
  GOLANG_VERSION: '1.23' # As we have go toolchain 1.23 specified in go.mod

permissions:
  contents: read

jobs:
  changes:
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.filter.outputs.backend_any_changed }}
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - uses: tj-actions/changed-files@e9772d140489982e0e3704fea5ee93d536f1e275 # v45.0.1
        id: filter
        with:
          # Any file which is not under docs/ or is not a markdown file is counted as a backend file
          files_yaml: |
            backend:
              - '!**.md'
              - '!**/*.md'
              - '!docs/**'

  check-go:
    name: Ensure Go modules synchronicity
    runs-on: ubuntu-22.04
    if: ${{ needs.changes.outputs.backend == 'true' }}
    needs:
      - changes
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidiness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .

  lint-go:
    name: Lint Go code
    runs-on: ubuntu-22.04
    if: ${{ needs.changes.outputs.backend == 'true' }}
    needs:
      - changes
    permissions:
      contents: read  # for actions/checkout to fetch code
      pull-requests: read  # for golangci/golangci-lint-action to fetch pull requests
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@aaa42aa0628b4ae2578232a66b541047968fac86 # v6.1.0
        with:
          version: v1.60.3
          args: --verbose

  code-gen:
    name: Check generated code
    runs-on: ubuntu-22.04
    if: ${{ needs.changes.outputs.backend == 'true' }}
    needs:
      - changes
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Check for changes in generated code
        run: |
          make build-installer
          git diff --exit-code -- .

  unit-test:
    name: Run unit tests
    runs-on: ubuntu-22.04
    if: ${{ needs.changes.outputs.backend == 'true' }}
    needs:
      - changes
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Test
        run: make test

  e2e-test:
    name: Run e2e tests
    runs-on: ubuntu-22.04
    if: ${{ needs.changes.outputs.backend == 'true' }}
    needs:
      - changes
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: v1.27.15+k3s1
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          sudo chmod go-r $HOME/.kube/config
          kubectl version
      - name: setup-e2e environment
        run: make setup-e2e
      - name: Download Go dependencies
        run: |
          go mod download
          go install github.com/mattn/goreman@latest
      - name: Run E2E server and wait for it being available
        timeout-minutes: 5
        run: |
          set -x
          make start-e2e 2>&1 | sed -r "s/[[:cntrl:]]\[[0-9]{1,3}m//g" > /tmp/e2e-server.log &
          count=1
          until curl -f http://127.0.0.1:8081/healthz; do
            sleep 10;
            if test $count -ge 180; then
              echo "Timeout"
              exit 1
            fi
            count=$((count+1))
          done
      - name: Run E2E testsuite
        timeout-minutes: 20
        run: |
          set -x
          make test-e2e
          killall goreman run stop-all || echo "trouble killing goreman"
          sleep 30
          echo "Operator logs"
          cat /tmp/e2e-server.log