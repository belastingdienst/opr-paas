name: CI run on PR
on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  # Golang version to use across CI steps
  GOLANG_VERSION: '1.23'

permissions:
  contents: read

jobs:
  fail_if_pull_request_is_draft:
    if: ${{ github.event.pull_request.draft == true }}
    runs-on: ubuntu-22.04
    steps:
      - name: Fails in order to indicate that pull request needs to be marked as ready to review and other checks needs to pass.
        run: exit 1
  
  codechanges:
    if: ${{ github.event.pull_request.draft == false }}
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.filter.outputs.backend_any_changed || steps.filter.outputs.ci_any_changed }}
    steps:
      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - uses: tj-actions/changed-files@d6e91a2266cdb9d62096cebf1e8546899c6aa18f # v45.0.6
        id: filter
        with:
          # Any file which is not under docs/, examples/, or is not a markdown file is counted as a backend file
          # Also run when ci-run-on-pr has been changed to validate it is working
          files_yaml: |
            backend:
              - '!**.md'
              - '!**/*.md'
              - '!docs/**'
              - '!examples/**'
              - '!.github/**'
            ci:
              - '.github/workflows/ci-run-on-pr.yaml'
  
  check-go:
    name: Ensure Go modules synchronicity
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidiness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .
  
  lint-go:
    name: Lint Go code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6.1.1
        with:
          version: v1.60.3
          args: --verbose
  
  code-gen:
    name: Check generated code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Check for changes in generated code
        run: |
          make manifests
          make generate
          git diff --exit-code -- .
  
  unit-test:
    name: Run unit tests
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Test
        run: make test
      - name: Generate test results artifacts
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: unittests-coverage
          path: /tmp/coverage/unittests
  
  e2e-test:
    name: Run e2e tests
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Install K3S
        env:
          INSTALL_K3S_VERSION: v1.27.15+k3s1
        run: |
          set -x
          curl -sfL https://get.k3s.io | sh -
          sudo chmod -R a+rw /etc/rancher/k3s
          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube
          sudo k3s kubectl config view --raw > $HOME/.kube/config
          sudo chown runner $HOME/.kube/config
          sudo chmod go-r $HOME/.kube/config
          kubectl version
      - name: setup-e2e environment
        run: make setup-e2e
      - name: Download Go dependencies
        run: |
          go mod download
          go install github.com/mattn/goreman@latest
      - name: Run E2E server and wait for it being available
        timeout-minutes: 5
        run: |
          set -x
          make run-operator E2E_WITH_COVERAGE=true 2>&1 | sed -r "s/[[:cntrl:]]\[[0-9]{1,3}m//g" > /tmp/e2e-server.log &
          count=1
          until curl -f http://127.0.0.1:8081/healthz; do
            sleep 10;
            if test $count -ge 180; then
              echo "Timeout"
              exit 1
            fi
            count=$((count+1))
          done
      - name: Run E2E testsuite
        timeout-minutes: 20
        run: |
          set -x
          make test-e2e
          killall goreman run stop-all || echo "trouble killing goreman"
      - name: Upload e2e coverage report
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: e2e-code-coverage
          path: /tmp/coverage/paas
      - name: Upload operator deployment log on failure
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: e2e-operator-logs-${{ github.run_id }}.log
          path: /tmp/e2e-server.log
        if: ${{ failure() }}
  
  e2e-test-with-built-image:
    name: Run e2e tests against deployed image
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32 # v5.0.2
        with:
          go-version: ${{ env.GOLANG_VERSION }}
        # https://github.com/marketplace/actions/kubernetes-kind-cluster#example-workflow
      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@0ad70e2299366b0e1552c7240f4e4567148f723e # v2.0.4
      - name: Test kind setup successfully
        run: |
          kubectl cluster-info
          kubectl version
      - name: Build operator image
        run: make docker-build
      - name: Load operator image to KinD
        run: kind load docker-image controller:latest
      - name: Setup-e2e mocks in KinD
        run: |
          kustomize build test/e2e/manifests/gitops-operator | kubectl create -f -
          kustomize build test/e2e/manifests/openshift | kubectl apply -f -
          # Wait a bit as the paas-context files rely on the previous deployed mocks
          sleep 10s
          kustomize build test/e2e/manifests/paas-context | kubectl apply -f -
      - name: Deploy operator
        run: make deploy
      - name: Wait for operator deployment to be ready
        run: |
          kubectl wait --for=condition=Available deployment/paas-controller-manager -n paas-system --timeout=120s
      - name: Run E2E testsuite
        timeout-minutes: 20
        run: |
          set -x
          make test-e2e
      - name: Retrieve operator deployment log on failure
        run: kubectl logs deployment/paas-controller-manager -n paas-system > /tmp/e2e-deployed-operator-logs-${{ github.run_id }}.log
        if: ${{ failure() }}
      - name: Upload operator deployment log on failure
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: e2e-deployed-operator-logs-${{ github.run_id }}.log
          path: /tmp/e2e-deployed-operator-logs-${{ github.run_id }}.log
        if: ${{ failure() }}
      - name: Clean test fixtures
        run: rm -rf /tmp/paas-e2e
  
  analyze:
    name: Process & analyze test artifacts
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    runs-on: ubuntu-22.04
    needs:
      - unit-test
      - codechanges
      - e2e-test
    steps:
      - name: Checkout code
        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0
      - name: Get e2e code coverage
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: e2e-code-coverage
          path: e2e-code-coverage
      - name: Get unit test code coverage
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: unittests-coverage
          path: test-results
      - name: Combine coverage reports
        run: go tool covdata textfmt -i=test-results,e2e-code-coverage -o test-results/full-coverage
      - name: Generate and print report
        run: go tool cover -func test-results/full-coverage
      - name: Upload test-coverage artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: full-coverage-report
          path: test-results/full-coverage
      - name: Fail if code coverage < 80%
        run: |
          coverage=$(go tool cover -func test-results/full-coverage | grep "total:" | awk '{print $NF}' | cut -d'%' -f1)
          if [ "$(echo "$coverage < 80" | bc)" -eq 1 ]; then
            echo "Coverage is less than 80% ($coverage%). Failing the build."
            exit 1
          fi
