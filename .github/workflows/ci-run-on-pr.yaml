name: CI run on PR
on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]

env:
  # Golang version to use across CI steps
  GOLANG_VERSION: '1.23'

permissions:
  contents: read

jobs:
  fail_if_pull_request_is_draft:
    if: ${{ github.event.pull_request.draft == true }}
    runs-on: ubuntu-22.04
    steps:
      - name: Fails in order to indicate that pull request needs to be marked as ready to review and other checks needs to pass.
        run: exit 1
  
  codechanges:
    if: ${{ github.event.pull_request.draft == false }}
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.filter.outputs.backend_any_changed || steps.filter.outputs.ci_any_changed }}
    steps:
      - uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - uses: tj-actions/changed-files@d6e91a2266cdb9d62096cebf1e8546899c6aa18f # v45.0.6
        id: filter
        with:
          # Any file which is not under docs/, examples/, or is not a markdown file is counted as a backend file
          # Also run when ci-run-on-pr has been changed to validate it is working
          files_yaml: |
            backend:
              - '!**.md'
              - '!**/*.md'
              - '!docs/**'
              - '!examples/**'
              - '!.github/**'
            ci:
              - '.github/workflows/ci-run-on-pr.yaml'
  
  check-go:
    name: Ensure Go modules synchronicity
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidiness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .
  
  lint-go:
    name: Lint Go code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@ec5d18412c0aeab7936cb16880d708ba2a64e1ae # v6.2.0
        with:
          version: v1.60.3
          args: --verbose
  
  code-gen:
    name: Check generated code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Check for changes in generated code
        run: |
          make manifests
          make generate
          git diff --exit-code -- .
  
  unit-test:
    name: Run unit tests
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Test
        run: make test
      - name: Generate test results artifacts
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: unittests-coverage
          path: cover.out
  
  e2e-test:
    name: Run e2e tests against deployed image
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
        # https://github.com/marketplace/actions/kubernetes-kind-cluster#example-workflow
      - name: Kubernetes KinD Cluster
        run: |
          go install sigs.k8s.io/kind@v0.26.0
          kind create cluster
      - name: Test kind setup successfully
        run: |
          kubectl cluster-info
          kubectl version
      - name: Build operator image
        run: make docker-build
      - name: Load operator image to KinD
        run: kind load docker-image controller:latest
      - name: Setup-e2e mocks in KinD
        run: |
          kustomize build test/e2e/manifests/gitops-operator | kubectl create -f -
          kustomize build test/e2e/manifests/openshift | kubectl apply -f -
          # Wait a bit as the paas-context files rely on the previous deployed mocks
          sleep 10s
          kustomize build test/e2e/manifests/paas-context | kubectl apply -f -
      - name: Deploy operator
        run: make deploy
      - name: Wait for operator deployment to be ready
        run: |
          kubectl wait --for=condition=Available deployment/paas-controller-manager -n paas-system --timeout=120s
      - name: Run E2E testsuite
        timeout-minutes: 20
        run: |
          set -x
          make test-e2e
      - name: Retrieve operator deployment log on failure
        run: kubectl logs deployment/paas-controller-manager -n paas-system > /tmp/e2e-deployed-operator-logs-${{ github.run_id }}.log
        if: ${{ failure() }}
      - name: Upload operator deployment log on failure
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: e2e-deployed-operator-logs-${{ github.run_id }}.log
          path: /tmp/e2e-deployed-operator-logs-${{ github.run_id }}.log
        if: ${{ failure() }}
      - name: Clean test fixtures
        run: rm -rf /tmp/paas-e2e
  
  test-coverage:
    name: Analyze test coverage
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    runs-on: ubuntu-22.04
    needs:
      - unit-test
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Get unit test code coverage
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: unittests-coverage
      - name: Generate and print report
        run: go tool cover -func=cover.out > full-coverage
      - name: Upload test-coverage artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: full-coverage-report
          path: full-coverage
      - name: Report coverage threshold
        run: |
          coverage=$(go tool cover -func=cover.out | grep "total:" | awk '{print $NF}' | cut -d'%' -f1)
          if [ "$(echo "$coverage < 80" | bc)" -eq 1 ]; then
            echo -e "\033[31mERR: Coverage is less than 80% ($coverage%). Please improve the tests.\033[0m"
          else
            echo -e "\033[32mINFO: Coverage is sufficient ($coverage%). Good job!\033[0m"
          fi
