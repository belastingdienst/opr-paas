name: CI run on PR
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

env:
  # Golang version to use across CI steps
  GOLANG_VERSION: '1.24'

permissions:
  contents: read

jobs:
  fail_if_pull_request_is_draft:
    if: ${{ github.event.pull_request.draft == true }}
    runs-on: ubuntu-22.04
    steps:
      - name: Fails in order to indicate that pull request needs to be marked as ready to review and other checks needs to pass.
        run: exit 1

  codechanges:
    if: ${{ github.event.pull_request.draft == false }}
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.filter.outputs.backend_any_changed || steps.filter.outputs.ci_any_changed }}
    steps:
      - uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - uses: tj-actions/changed-files@0b975f61488402a699abcebd6a1e25924cf85218 # v45.0.7
        id: filter
        with:
          # Any file which is not under docs/, examples/, or is not a markdown file is counted as a backend file
          # Also run when ci-run-on-pr has been changed to validate it is working
          files_yaml: |
            backend:
              - '!**.md'
              - '!**/*.md'
              - '!docs/**'
              - '!examples/**'
              - '!.github/**'
            ci:
              - '.github/workflows/ci-run-on-pr.yaml'

  check-go:
    name: Ensure Go modules synchronicity
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Download all Go modules
        run: |
          go mod download
      - name: Check for tidiness of go.mod and go.sum
        run: |
          go mod tidy
          git diff --exit-code -- .

  lint-go:
    name: Lint Go code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@1481404843c368bc19ca9406f87d6e0fc97bdcfd # v7.0.0
        with:
          version: v1.64.5
          args: --verbose

  code-gen:
    name: Check generated code
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Check for changes in generated code
        run: |
          make manifests
          make generate
          git diff --exit-code -- .

  unit-test:
    name: Run unit tests
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - name: Test
        run: make test
      - name: check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          config: .testcoverage.yaml
          profile: cover.out
          continue-on-error: true # Should fail after coverage comment is posted
      - name: Generate test results artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: unittests-coverage
          path: cover.out
      - name: find pull request ID
        run: |
          PR_ID=${GITHUB_REF_NAME%%/merge}
          echo "PR_ID: $PR_ID"

          if [ "$PR_ID" != "null" ]; then
            echo "pull_request_id=$PR_ID" >> $GITHUB_ENV
          else
            echo "No open pull request found for this branch."
          fi
      - name: create badge
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: cover.out
          threshold-total: 42
          git-token: ${{ github.ref_name == 'main' && secrets.GITHUB_TOKEN || '' }}
          git-branch: badges
      - name: post coverage report
        if: env.pull_request_id
        uses: thollander/actions-comment-pull-request@v3
        continue-on-error: true #we need pull_request_target or this will fail when not running pr in BD organisation
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-tag: coverage-report
          pr-number: ${{ env.pull_request_id }}
          message: |
            go-test-coverage report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }}```
      - name: 'finally check coverage'
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1

  e2e-test:
    name: Run e2e tests against deployed image
    runs-on: ubuntu-22.04
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    needs:
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Setup Golang
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
        # https://github.com/marketplace/actions/kubernetes-kind-cluster#example-workflow
      - name: Kubernetes KinD Cluster
        run: |
          go install sigs.k8s.io/kind@v0.26.0
          kind create cluster
      - name: Test kind setup successfully
        run: |
          kubectl cluster-info
          kubectl version
      - name: Build operator image
        run: make docker-build
      - name: Load operator image to KinD
        run: kind load docker-image controller:latest
      - name: Setup-e2e mocks in KinD
        run: |
          kustomize build test/e2e/manifests/gitops-operator | kubectl create -f -
          kustomize build test/e2e/manifests/openshift | kubectl apply -f -
          # Wait a bit as the paas-context files rely on the previous deployed mocks
          sleep 10s
          kustomize build test/e2e/manifests/paas-context | kubectl apply -f -
      - name: Deploy operator
        run: make deploy
      - name: Wait for operator deployment to be ready
        run: |
          kubectl wait --for=condition=Available deployment/paas-controller-manager -n paas-system --timeout=120s
      - name: Run E2E testsuite
        timeout-minutes: 20
        run: |
          set -x
          make test-e2e
      - name: Retrieve operator deployment log on failure
        run: kubectl logs deployment/paas-controller-manager -n paas-system > /tmp/e2e-deployed-operator-logs-${{ github.run_id }}.log
        if: ${{ failure() }}
      - name: Upload operator deployment log on failure
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: e2e-deployed-operator-logs-${{ github.run_id }}.log
          path: /tmp/e2e-deployed-operator-logs-${{ github.run_id }}.log
        if: ${{ failure() }}
      - name: Clean test fixtures
        run: rm -rf /tmp/paas-e2e

  test-coverage:
    name: Report test coverage
    if: ${{ needs.codechanges.outputs.backend == 'true' && github.event.pull_request.draft == false}}
    runs-on: ubuntu-22.04
    needs:
      - unit-test
      - codechanges
    steps:
      - name: Checkout code
        uses: actions/checkout@85e6279cec87321a52edac9c87bce653a07cf6c2 # v4.0.0
      - name: Get unit test code coverage
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: unittests-coverage
      - name: Generate and print report
        run: go tool cover -func=cover.out > full-coverage
      - name: Upload test-coverage artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: full-coverage-report
          path: full-coverage
